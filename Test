--services
local players = game:GetService("Players")
local tweenService = game:GetService("TweenService")
local uis = game:GetService("UserInputService")
local runService = game:GetService("RunService")
local coreGui = game:GetService("CoreGui")
local HttpService = game:GetService("HttpService")

if not runService:IsStudio() then
	if coreGui:FindFirstChild("EraGui") then
		coreGui.EraGui:Destroy()
	end
end
if not runService:IsStudio() then
	if coreGui:FindFirstChild("EraNotify") then
		coreGui.EraNotify:Destroy()
	end
end

--loading
local Notify = loadstring(game:HttpGet("https://raw.githubusercontent.com/DarkLord6789/luauScripts/refs/heads/main/Notify"))()
local BlurModule = loadstring(game:HttpGet('https://raw.githubusercontent.com/DarkLord6789/luauScripts/refs/heads/main/BlurModule'))()
local Themes = loadstring(game:HttpGet("https://raw.githubusercontent.com/DarkLord6789/luauScripts/refs/heads/main/MenuThemes"))()

--Studio
if runService:IsStudio() then
	function gethui() return end local http_request = nil local syn = {protect_gui = false,request = false,}local http = nil function writefile(tt,t,ttt)end function request(a) end function identifyexecutor() return "test" end function isfolder(t)end function makefolder(t)end function isfile(r)end function readfile(t)end
end

--Variables
EraGui = {};
local mouse = game.Players.LocalPlayer:GetMouse()
local viewport = workspace.CurrentCamera.ViewportSize
local camera = workspace.CurrentCamera
local tweenInfoTransparency = TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut)

--Methods
function EraGui:SetTransparency(object, value)
	local tween = tweenService:Create(object, tweenInfoTransparency, {BackgroundTransparency = value})
	tween:Play()
	return
end

function EraGui:AddMovingMenu(DragPoint, Main)
	pcall(function()
		local Dragging, DragInput, MousePos, FramePos = false,false,false,false
		DragPoint.InputBegan:Connect(function(Input)
			if Input.UserInputType == Enum.UserInputType.MouseButton1 then
				Dragging = true
				MousePos = Input.Position
				FramePos = Main.Position

				Input.Changed:Connect(function()
					if Input.UserInputState == Enum.UserInputState.End then
						Dragging = false
					end
				end)
			end
		end)
		DragPoint.InputChanged:Connect(function(Input)
			if Input.UserInputType == Enum.UserInputType.MouseMovement then
				DragInput = Input
			end
		end)
		uis.InputChanged:Connect(function(Input)
			if Input == DragInput and Dragging then
				local Delta = Input.Position - MousePos
				tweenService:Create(Main, TweenInfo.new(0.0, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {Position  = UDim2.new(FramePos.X.Scale,FramePos.X.Offset + Delta.X, FramePos.Y.Scale, FramePos.Y.Offset + Delta.Y)}):Play()
			end
		end)
	end)
end

function EraGui:validate(defaults, options)
	for i, v in pairs(defaults) do
		if options[i] == nil then
			options[i] = v
		end
	end
	return options
end

function EraGui:InitWindow(options)
	options = EraGui:validate({
		Name = "Era Hub",
		SubTitle = "v2 | 0.0.1",
		AntiUISInputGame = false,
		Webhook = "",
		isPremium = false,
		LastUpdated = "00.00.0000",
	}, options or {})

	-- /// MANAGEERSS OF MENU
	local MenuManager = {};

	MenuManager = {
		CurrentTab = "StartingPage",
		Minimized = false,
		MenuOpen = true,
		TransparencyMenu = true,
		AcrylicMenu = true,
		SelectedTheme = Themes.MenuTheme.Dark;

		TabManager = {Tabs = {}};
		Notify = Notify;
		Options = {};
		ConfigManager = {
			FolderName = "EraHubConfigs";
			IgnorableIdx = {};
			ElementsParser = {
				Toggle = {
					Save = function(idx)
						return { type = "Toggle", idx = MenuManager.Options[idx].Name, value = MenuManager.Options[idx].State, }
					end,
					Load = function(obj, data)
						if MenuManager.Options[obj] and MenuManager.Options[obj].State ~= data then
							MenuManager.Options[obj]:Toggle(data)
						end
					end,
				};
				Slider = {
					Save = function(idx)
						return { type = "Slider", idx = MenuManager.Options[idx].Name, value = MenuManager.Options[idx].Value, }
					end,
					Load = function(obj, data)
						if MenuManager.Options[obj] then
							MenuManager.Options[obj]:SetValue(data)
						end
					end,
				};
				InputBox = {
					Save = function(idx)
						return { type = "InputBox", idx = MenuManager.Options[idx].Name, value = MenuManager.Options[idx].Text, }
					end,
					Load = function(obj, data)
						if MenuManager.Options[obj] then
							MenuManager.Options[obj]:SetText(data)
						end
					end,
				};
				Dropdown = {
					Save = function(idx)
						return { type = "Dropdown", idx = MenuManager.Options[idx].Name, value = MenuManager.Options[idx]:GetAllSelectedElements()}
					end,
					Load = function(obj, data)
						if MenuManager.Options[obj] and not MenuManager.ConfigManager.IgnorableIdx[obj] then
							MenuManager.Options[obj]:SetValues(data)
						end
					end,
				};
				BindToggle = {
					Save = function(idx)
						return { type = "BindToggle", idx = MenuManager.Options[idx].Name, value = {state = MenuManager.Options[idx].State, bindkey = MenuManager.Options[idx].BindButton}}
					end,
					Load = function(obj, data)
						if MenuManager.Options[obj] and MenuManager.Options[obj].State ~= data.state then
							MenuManager.Options[obj]:SetBind(data.bindkey); MenuManager.Options[obj]:Toggle(data.state)
						end
					end,
				};
				ColorPickerToggle = {
					Save = function(idx)
						return { type = "ColorPickerToggle", idx = MenuManager.Options[idx].Name, value = {state = MenuManager.Options[idx].State, color = MenuManager.Options[idx].Color:ToHex(), transparency = MenuManager.Options[idx].Transparency}}
					end,
					Load = function(obj, data)
						if MenuManager.Options[obj] and MenuManager.Options[obj].State ~= data.state then
							MenuManager.Options[obj]:SetColor(Color3.fromHex(data.color), data.transparency); MenuManager.Options[obj]:Toggle(data.state)
						end
					end,
				};
				ColorPicker = {
					Save = function(idx)
						return { type = "ColorPicker", idx = MenuManager.Options[idx].Name, value = {color = MenuManager.Options[idx].Color:ToHex(), transparency = MenuManager.Options[idx].Transparency}}
					end,
					Load = function(obj, data)
						if MenuManager.Options[obj] then
							MenuManager.Options[obj]:SetColor(Color3.fromHex(data.color), data.transparency);
						end
					end,
				};
			};
		};
	}

	--///RENDER
	--Menu Main

	do
		MenuManager["1"] = Instance.new("ScreenGui", runService:IsStudio() and players.LocalPlayer:WaitForChild("PlayerGui") or coreGui);
		MenuManager["1"]["Name"] = [[EraGui]];
		MenuManager["1"]["ZIndexBehavior"] = Enum.ZIndexBehavior.Sibling;
		MenuManager["1"]["ResetOnSpawn"] = false;
		MenuManager["1"]["DisplayOrder"] = 999999;

		-- StarterGui.EraGui.MainWindow
		MenuManager["2"] = Instance.new("Frame", MenuManager["1"]);
		MenuManager["2"]["BorderSizePixel"] = 0;
		MenuManager["2"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
		MenuManager["2"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
		MenuManager["2"]["Size"] = UDim2.new(0, 645, 0, 435);
		MenuManager["2"]["Position"] = UDim2.new(0.5, 0, 0.5, 0)
		MenuManager["2"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
		MenuManager["2"]["Active"] = false
		MenuManager["2"]["Name"] = [[MainWindow]];
		MenuManager["2"]["BackgroundTransparency"] = 1;

		-- StarterGui.EraGui.MainWindow.Background
		MenuManager["3"] = Instance.new("Frame", MenuManager["2"]);
		MenuManager["3"]["BorderSizePixel"] = 0;
		MenuManager["3"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
		MenuManager["3"]["Size"] = UDim2.new(1, 0, 1, 0);
		MenuManager["3"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
		MenuManager["3"]["Name"] = [[Background]];
		MenuManager["3"]["BackgroundTransparency"] = 0.9;

		-- StarterGui.EraGui.MainWindow.Background.Gradient
		MenuManager["4"] = Instance.new("Frame", MenuManager["3"]);
		MenuManager["4"]["BorderSizePixel"] = 0;
		MenuManager["4"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
		MenuManager["4"]["Size"] = UDim2.new(1, 0, 1, 0);
		MenuManager["4"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
		MenuManager["4"]["Name"] = [[Gradient]];
		MenuManager["4"]["BackgroundTransparency"] = 0.4;

		-- StarterGui.EraGui.MainWindow.Background.Gradient.UICorner
		MenuManager["5"] = Instance.new("UICorner", MenuManager["4"]);

		-- StarterGui.EraGui.MainWindow.Background.Gradient.UIGradient
		MenuManager["6"] = Instance.new("UIGradient", MenuManager["4"]);
		MenuManager["6"]["Rotation"] = 90;
		MenuManager["6"]["Color"] = MenuManager.SelectedTheme.BlurredGradient;

		-- StarterGui.EraGui.MainWindow.Background.Gradient.UIStroke
		MenuManager["7"] = Instance.new("UIStroke", MenuManager["4"]);
		MenuManager["7"]["Transparency"] = 0.5;
		MenuManager["7"]["Color"] = MenuManager.SelectedTheme.BlurredBorder;

		-- StarterGui.EraGui.MainWindow.Background.AcrylicBackground
		MenuManager["8"] = Instance.new("Frame", MenuManager["3"]);
		MenuManager["8"]["BorderSizePixel"] = 0;
		MenuManager["8"]["BackgroundColor3"] = MenuManager.SelectedTheme.BlurredMain;
		MenuManager["8"]["Size"] = UDim2.new(1, 0, 1, 0);
		MenuManager["8"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
		MenuManager["8"]["Name"] = [[AcrylicBackground]];
		MenuManager["8"]["BackgroundTransparency"] = MenuManager.SelectedTheme.BlurredTransparency;

		-- StarterGui.EraGui.MainWindow.Background.AcrylicBackground.UICorner
		MenuManager["a"] = Instance.new("UICorner", MenuManager["8"]);
		-- StarterGui.EraGui.MainWindow.Background.UICorner
		MenuManager["b"] = Instance.new("UICorner", MenuManager["3"]);

		-- StarterGui.EraGui.MainWindow.Background.ContentHolder
		MenuManager["2e"] = Instance.new("Frame", MenuManager["3"]);
		MenuManager["2e"]["BorderSizePixel"] = 0;
		MenuManager["2e"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
		MenuManager["2e"]["Size"] = UDim2.new(1, -175, 1, -50);
		MenuManager["2e"]["Position"] = UDim2.new(0, 175, 0, 50);
		MenuManager["2e"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
		MenuManager["2e"]["Name"] = [[ContentHolder]];
		MenuManager["2e"]["Active"] = false
		MenuManager["2e"]["BackgroundTransparency"] = 1;

		-- StarterGui.EraGui.MainWindow.Background.ContentHolder.AnimationHolder
		MenuManager["2f"] = Instance.new("CanvasGroup", MenuManager["2e"]);
		MenuManager["2f"]["BorderSizePixel"] = 0;
		MenuManager["2f"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
		MenuManager["2f"]["Size"] = UDim2.new(1, 0, 1, 0);
		MenuManager["2f"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
		MenuManager["2f"]["Name"] = [[AnimationHolder]];
		MenuManager["2f"]["BackgroundTransparency"] = 1;
		MenuManager["2f"]["GroupTransparency"] = 0;

		-- StarterGui.EraGui.MainWindow.Background.ContentHolder.AnimationHolder.UIPadding
		MenuManager["9c"] = Instance.new("UIPadding", MenuManager["2f"]);
		MenuManager["9c"]["PaddingRight"] = UDim.new(0, 2);
		MenuManager["9c"]["PaddingLeft"] = UDim.new(0, 2);
		MenuManager["9c"]["PaddingBottom"] = UDim.new(0, 5);

		-- StarterGui.EraGui.MainWindow.Background.ColorPickers
		MenuManager["9d"] = Instance.new("Folder", MenuManager["3"]);
		MenuManager["9d"]["Name"] = [[ColorPickers]];

		MenuManager["9r"] = Instance.new("Folder", MenuManager["3"]);
		MenuManager["9r"]["Name"] = [[Dropdowns]];
		
	end

	--Menu Main.ContentHolder.AnimationHolder.StartingPage

	do
		-- Main Instance
		do
			-- StarterGui.DisplayEraGui.MainWindow.Background.ContentHolder.AnimationHolder.StartsScrolling
			MenuManager["7d"] = Instance.new("ScrollingFrame", MenuManager["2f"]);
			MenuManager["7d"]["ScrollingDirection"] = Enum.ScrollingDirection.Y;
			MenuManager["7d"]["BorderSizePixel"] = 0;
			MenuManager["7d"]["CanvasSize"] = UDim2.new(0, 0, 0, -5);
			MenuManager["7d"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
			MenuManager["7d"]["Name"] = [[StartsScrolling]];
			MenuManager["7d"]["ScrollBarImageTransparency"] = 0.1;
			MenuManager["7d"]["HorizontalScrollBarInset"] = Enum.ScrollBarInset.Always;
			MenuManager["7d"]["AutomaticCanvasSize"] = Enum.AutomaticSize.Y;
			MenuManager["7d"]["ClipsDescendants"] = false;
			MenuManager["7d"]["Size"] = UDim2.new(1, 0, 1, 0);
			MenuManager["7d"]["ScrollBarImageColor3"] = Color3.fromRGB(121, 121, 121);
			MenuManager["7d"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
			MenuManager["7d"]["ScrollBarThickness"] = 3;
			MenuManager["7d"]["BackgroundTransparency"] = 1;


			-- StarterGui.DisplayEraGui.MainWindow.Background.ContentHolder.AnimationHolder.StartsScrolling.UIPadding
			MenuManager["7e"] = Instance.new("UIPadding", MenuManager["7d"]);
			MenuManager["7e"]["PaddingRight"] = UDim.new(0, 9);
			MenuManager["7e"]["PaddingLeft"] = UDim.new(0, 5);
			MenuManager["7e"]["PaddingBottom"] = UDim.new(0, 5);
			MenuManager["7e"]["PaddingTop"] = UDim.new(0, 3);

			-- StarterGui.DisplayEraGui.MainWindow.Background.ContentHolder.AnimationHolder.StartsScrolling.ColorPicker
			MenuManager["7f"] = Instance.new("Folder", MenuManager["7d"]);
			MenuManager["7f"]["Name"] = [[ColorPicker]];


			-- StarterGui.DisplayEraGui.MainWindow.Background.ContentHolder.AnimationHolder.StartsScrolling.UIListLayout
			MenuManager["80"] = Instance.new("UIListLayout", MenuManager["7d"]);
			MenuManager["80"]["HorizontalAlignment"] = Enum.HorizontalAlignment.Center;
			MenuManager["80"]["HorizontalFlex"] = Enum.UIFlexAlignment.Fill;
			MenuManager["80"]["Padding"] = UDim.new(0, 15);
			MenuManager["80"]["SortOrder"] = Enum.SortOrder.LayoutOrder;
			MenuManager["80"]["FillDirection"] = Enum.FillDirection.Horizontal;

			-- StarterGui.DisplayEraGui.MainWindow.Background.ContentHolder.AnimationHolder.StartsScrolling.WelcomeHolder
			MenuManager["81"] = Instance.new("Frame", MenuManager["7d"]);
			MenuManager["81"]["BorderSizePixel"] = 0;
			MenuManager["81"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
			MenuManager["81"]["Size"] = UDim2.new(1, 0, 1, 0);
			MenuManager["81"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
			MenuManager["81"]["Name"] = [[WelcomeHolder]];
			MenuManager["81"]["BackgroundTransparency"] = 1;

			-- StarterGui.DisplayEraGui.MainWindow.Background.ContentHolder.AnimationHolder.StartsScrolling.WelcomeHolder.UIListLayout
			MenuManager["9f"] = Instance.new("UIListLayout", MenuManager["81"]);
			MenuManager["9f"]["Wraps"] = true;
			MenuManager["9f"]["Padding"] = UDim.new(0, 7);
			MenuManager["9f"]["SortOrder"] = Enum.SortOrder.LayoutOrder;
			MenuManager["9f"]["FillDirection"] = Enum.FillDirection.Horizontal;
		end
		
		-- welcome
		do
			-- StarterGui.DisplayEraGui.MainWindow.Background.ContentHolder.AnimationHolder.StartsScrolling.WelcomeHolder.Welcome
			MenuManager["a0"] = Instance.new("Frame", MenuManager["81"]);
			MenuManager["a0"]["BorderSizePixel"] = 0;
			MenuManager["a0"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
			MenuManager["a0"]["ClipsDescendants"] = true;
			MenuManager["a0"]["Size"] = UDim2.new(1, 0, 0, 95);
			MenuManager["a0"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
			MenuManager["a0"]["Name"] = [[Welcome]];
			MenuManager["a0"]["BackgroundTransparency"] = 0.92;

			-- StarterGui.DisplayEraGui.MainWindow.Background.ContentHolder.AnimationHolder.StartsScrolling.WelcomeHolder.Welcome.UIPadding
			MenuManager["a1"] = Instance.new("UIPadding", MenuManager["a0"]);
			MenuManager["a1"]["PaddingTop"] = UDim.new(0, 7);
			MenuManager["a1"]["PaddingRight"] = UDim.new(0, 7);
			MenuManager["a1"]["PaddingLeft"] = UDim.new(0, 7);
			MenuManager["a1"]["PaddingBottom"] = UDim.new(0, 7);

			-- StarterGui.DisplayEraGui.MainWindow.Background.ContentHolder.AnimationHolder.StartsScrolling.WelcomeHolder.Welcome.UICorner
			MenuManager["a2"] = Instance.new("UICorner", MenuManager["a0"]);

			-- StarterGui.DisplayEraGui.MainWindow.Background.ContentHolder.AnimationHolder.StartsScrolling.WelcomeHolder.Welcome.UIStroke
			MenuManager["a3"] = Instance.new("UIStroke", MenuManager["a0"]);
			MenuManager["a3"]["Transparency"] = 0.5;
			MenuManager["a3"]["Color"] = Color3.fromRGB(81, 81, 81);

			-- StarterGui.DisplayEraGui.MainWindow.Background.ContentHolder.AnimationHolder.StartsScrolling.WelcomeHolder.Welcome.Frame
			MenuManager["a4"] = Instance.new("Frame", MenuManager["a0"]);
			MenuManager["a4"]["BorderSizePixel"] = 0;
			MenuManager["a4"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
			MenuManager["a4"]["Size"] = UDim2.new(0, 79, 0, 80);
			MenuManager["a4"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
			MenuManager["a4"]["BackgroundTransparency"] = 0.92;

			-- StarterGui.DisplayEraGui.MainWindow.Background.ContentHolder.AnimationHolder.StartsScrolling.WelcomeHolder.Welcome.Frame.UserIcon
			MenuManager["a5"] = Instance.new("ImageLabel", MenuManager["a4"]);
			MenuManager["a5"]["BorderSizePixel"] = 0;
			MenuManager["a5"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
			MenuManager["a5"]["Image"] = [[rbxassetid://105232043838452]];
			MenuManager["a5"]["Size"] = UDim2.new(1, 0, 1, 0);
			MenuManager["a5"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
			MenuManager["a5"]["BackgroundTransparency"] = 1;
			MenuManager["a5"]["Name"] = [[UserIcon]];

			-- StarterGui.DisplayEraGui.MainWindow.Background.ContentHolder.AnimationHolder.StartsScrolling.WelcomeHolder.Welcome.Frame.UserIcon.UICorner
			MenuManager["a6"] = Instance.new("UICorner", MenuManager["a5"]);
			MenuManager["a6"]["CornerRadius"] = UDim.new(0, 15);

			-- StarterGui.DisplayEraGui.MainWindow.Background.ContentHolder.AnimationHolder.StartsScrolling.WelcomeHolder.Welcome.Frame.UIStroke
			MenuManager["a7"] = Instance.new("UIStroke", MenuManager["a4"]);
			MenuManager["a7"]["Transparency"] = 0.5;
			MenuManager["a7"]["Color"] = Color3.fromRGB(81, 81, 81);

			-- StarterGui.DisplayEraGui.MainWindow.Background.ContentHolder.AnimationHolder.StartsScrolling.WelcomeHolder.Welcome.Frame.UICorner
			MenuManager["a8"] = Instance.new("UICorner", MenuManager["a4"]);

			-- StarterGui.DisplayEraGui.MainWindow.Background.ContentHolder.AnimationHolder.StartsScrolling.WelcomeHolder.Welcome.TextHolder
			MenuManager["a9"] = Instance.new("Frame", MenuManager["a0"]);
			MenuManager["a9"]["BorderSizePixel"] = 0;
			MenuManager["a9"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
			MenuManager["a9"]["Size"] = UDim2.new(0.7, 0, 0.8, 0);
			MenuManager["a9"]["Position"] = UDim2.new(0, 92, 0, 0);
			MenuManager["a9"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
			MenuManager["a9"]["Name"] = [[TextHolder]];
			MenuManager["a9"]["BackgroundTransparency"] = 1;

			-- StarterGui.DisplayEraGui.MainWindow.Background.ContentHolder.AnimationHolder.StartsScrolling.WelcomeHolder.Welcome.TextHolder.UIListLayout
			MenuManager["aa"] = Instance.new("UIListLayout", MenuManager["a9"]);
			MenuManager["aa"]["SortOrder"] = Enum.SortOrder.LayoutOrder;

			-- StarterGui.DisplayEraGui.MainWindow.Background.ContentHolder.AnimationHolder.StartsScrolling.WelcomeHolder.Welcome.TextHolder.Text
			MenuManager["ab"] = Instance.new("TextLabel", MenuManager["a9"]);
			MenuManager["ab"]["TextWrapped"] = true;
			MenuManager["ab"]["TextTruncate"] = Enum.TextTruncate.SplitWord;
			MenuManager["ab"]["BorderSizePixel"] = 0;
			MenuManager["ab"]["TextXAlignment"] = Enum.TextXAlignment.Left;
			MenuManager["ab"]["TextYAlignment"] = Enum.TextYAlignment.Top;
			MenuManager["ab"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
			MenuManager["ab"]["TextSize"] = 17;
			MenuManager["ab"]["FontFace"] = Font.new([[rbxassetid://12187365364]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
			MenuManager["ab"]["TextColor3"] = Color3.fromRGB(241, 241, 241);
			MenuManager["ab"]["BackgroundTransparency"] = 1;
			MenuManager["ab"]["Size"] = UDim2.new(0.992, 0, 0, 17);
			MenuManager["ab"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
			MenuManager["ab"]["Text"] = [[Welcome,]];
			MenuManager["ab"]["Name"] = [[Text]];
			MenuManager["ab"]["Position"] = UDim2.new(0.3, 0, 0, 0);


			-- StarterGui.DisplayEraGui.MainWindow.Background.ContentHolder.AnimationHolder.StartsScrolling.WelcomeHolder.Welcome.TextHolder.NickName
			MenuManager["ac"] = Instance.new("TextLabel", MenuManager["a9"]);
			MenuManager["ac"]["TextWrapped"] = true;
			MenuManager["ac"]["TextTruncate"] = Enum.TextTruncate.SplitWord;
			MenuManager["ac"]["BorderSizePixel"] = 0;
			MenuManager["ac"]["TextXAlignment"] = Enum.TextXAlignment.Left;
			MenuManager["ac"]["TextYAlignment"] = Enum.TextYAlignment.Top;
			MenuManager["ac"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
			MenuManager["ac"]["TextSize"] = 17;
			MenuManager["ac"]["FontFace"] = Font.new([[rbxassetid://12187365364]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
			MenuManager["ac"]["TextColor3"] = Color3.fromRGB(241, 241, 241);
			MenuManager["ac"]["BackgroundTransparency"] = 1;
			MenuManager["ac"]["Size"] = UDim2.new(0.992, 0, 0, 45);
			MenuManager["ac"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
			MenuManager["ac"]["Text"] = game.Players.LocalPlayer.Name;
			MenuManager["ac"]["Name"] = [[NickName]];
			MenuManager["ac"]["Position"] = UDim2.new(0.3, 0, 0, 0);

			-- StarterGui.DisplayEraGui.MainWindow.Background.ContentHolder.AnimationHolder.StartsScrolling.WelcomeHolder.Welcome.TextHolder.TextHolder
			MenuManager["ad1"] = Instance.new("Frame", MenuManager["a9"]);
			MenuManager["ad1"]["BorderSizePixel"] = 0;
			MenuManager["ad1"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
			MenuManager["ad1"]["Size"] = UDim2.new(1, 0, 0, 18);
			MenuManager["ad1"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
			MenuManager["ad1"]["Name"] = [[TextHolder]];
			MenuManager["ad1"]["LayoutOrder"] = 3;
			MenuManager["ad1"]["BackgroundTransparency"] = 1;

			-- StarterGui.DisplayEraGui.MainWindow.Background.ContentHolder.AnimationHolder.StartsScrolling.WelcomeHolder.Welcome.TextHolder.TextHolder.ButtonHere
			MenuManager["ae1"] = Instance.new("TextButton", MenuManager["ad1"]);
			MenuManager["ae1"]["TextWrapped"] = true;
			MenuManager["ae1"]["TextTruncate"] = Enum.TextTruncate.SplitWord;
			MenuManager["ae1"]["BorderSizePixel"] = 0;
			MenuManager["ae1"]["TextXAlignment"] = Enum.TextXAlignment.Left;
			MenuManager["ae1"]["TextYAlignment"] = Enum.TextYAlignment.Top;
			MenuManager["ae1"]["TextSize"] = 17;
			MenuManager["ae1"]["FontFace"] = Font.new([[rbxassetid://12187365364]], Enum.FontWeight.SemiBold, Enum.FontStyle.Italic);
			MenuManager["ae1"]["BackgroundTransparency"] = 1;
			MenuManager["ae1"]["Size"] = UDim2.new(0, 45, 0, 18);
			MenuManager["ae1"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
			MenuManager["ae1"]["Text"] = [[here]];
			MenuManager["ae1"]["LayoutOrder"] = 1;
			MenuManager["ae1"]["Name"] = [[IgnoreButtonHere]];
			MenuManager["ae1"]["TextColor3"] = Color3.fromRGB(24, 147, 255);
			

			-- StarterGui.DisplayEraGui.MainWindow.Background.ContentHolder.AnimationHolder.StartsScrolling.WelcomeHolder.Welcome.TextHolder.TextHolder.UIListLayout
			MenuManager["af"] = Instance.new("UIListLayout", MenuManager["ad1"]);
			MenuManager["af"]["Padding"] = UDim.new(0, 1);
			MenuManager["af"]["SortOrder"] = Enum.SortOrder.LayoutOrder;
			MenuManager["af"]["FillDirection"] = Enum.FillDirection.Horizontal;

			-- StarterGui.DisplayEraGui.MainWindow.Background.ContentHolder.AnimationHolder.StartsScrolling.WelcomeHolder.Welcome.TextHolder.TextHolder.Text
			MenuManager["b0"] = Instance.new("TextLabel", MenuManager["ad1"]);
			MenuManager["b0"]["TextWrapped"] = true;
			MenuManager["b0"]["TextTruncate"] = Enum.TextTruncate.SplitWord;
			MenuManager["b0"]["BorderSizePixel"] = 0;
			MenuManager["b0"]["TextXAlignment"] = Enum.TextXAlignment.Left;
			MenuManager["b0"]["TextYAlignment"] = Enum.TextYAlignment.Top;
			MenuManager["b0"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
			MenuManager["b0"]["TextSize"] = 17;
			MenuManager["b0"]["FontFace"] = Font.new([[rbxassetid://12187365364]], Enum.FontWeight.SemiBold, Enum.FontStyle.Normal);
			MenuManager["b0"]["TextColor3"] = Color3.fromRGB(241, 241, 241);
			MenuManager["b0"]["BackgroundTransparency"] = 1;
			MenuManager["b0"]["Size"] = UDim2.new(0, 168, 0, 18);
			MenuManager["b0"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
			MenuManager["b0"]["Text"] = [[Found A Bug? Report it]];
			MenuManager["b0"]["Name"] = [[Text]];

			-- StarterGui.DisplayEraGui.MainWindow.Background.ContentHolder.AnimationHolder.StartsScrolling.WelcomeHolder.Welcome.UIGradient
			MenuManager["b1"] = Instance.new("UIGradient", MenuManager["a0"]);
			MenuManager["b1"]["Rotation"] = 60;
			MenuManager["b1"]["Transparency"] = NumberSequence.new{NumberSequenceKeypoint.new(0.000, 0),NumberSequenceKeypoint.new(1.000, 0.7125)};
		end

		-- Information
		do
			-- StarterGui.DisplayEraGui.MainWindow.Background.ContentHolder.AnimationHolder.StartsScrolling.WelcomeHolder.Information
			MenuManager["82"] = Instance.new("Frame", MenuManager["81"]);
			MenuManager["82"]["BorderSizePixel"] = 0;
			MenuManager["82"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
			MenuManager["82"]["ClipsDescendants"] = true;
			MenuManager["82"]["Size"] = UDim2.new(0.65, 0, 0, 95);
			MenuManager["82"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
			MenuManager["82"]["Name"] = [[Information]];
			MenuManager["82"]["LayoutOrder"] = 1;
			MenuManager["82"]["BackgroundTransparency"] = 0.92;

			-- StarterGui.DisplayEraGui.MainWindow.Background.ContentHolder.AnimationHolder.StartsScrolling.WelcomeHolder.Information.UIPadding
			MenuManager["83"] = Instance.new("UIPadding", MenuManager["82"]);
			MenuManager["83"]["PaddingTop"] = UDim.new(0, 7);
			MenuManager["83"]["PaddingRight"] = UDim.new(0, 7);
			MenuManager["83"]["PaddingLeft"] = UDim.new(0, 7);
			MenuManager["83"]["PaddingBottom"] = UDim.new(0, 7);

			-- StarterGui.DisplayEraGui.MainWindow.Background.ContentHolder.AnimationHolder.StartsScrolling.WelcomeHolder.Information.UICorner
			MenuManager["84"] = Instance.new("UICorner", MenuManager["82"]);

			-- StarterGui.DisplayEraGui.MainWindow.Background.ContentHolder.AnimationHolder.StartsScrolling.WelcomeHolder.Information.UIStroke
			MenuManager["85"] = Instance.new("UIStroke", MenuManager["82"]);
			MenuManager["85"]["Transparency"] = 0.5;
			MenuManager["85"]["Color"] = Color3.fromRGB(81, 81, 81);

			-- StarterGui.DisplayEraGui.MainWindow.Background.ContentHolder.AnimationHolder.StartsScrolling.WelcomeHolder.Information.Frame
			MenuManager["86"] = Instance.new("Frame", MenuManager["82"]);
			MenuManager["86"]["BorderSizePixel"] = 0;
			MenuManager["86"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
			MenuManager["86"]["Size"] = UDim2.new(0.267, 0, 0.99, 0);
			MenuManager["86"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
			MenuManager["86"]["BackgroundTransparency"] = 0.92;

			-- StarterGui.DisplayEraGui.MainWindow.Background.ContentHolder.AnimationHolder.StartsScrolling.WelcomeHolder.Information.Frame.UserIcon
			MenuManager["87"] = Instance.new("ImageLabel", MenuManager["86"]);
			MenuManager["87"]["BorderSizePixel"] = 0;
			MenuManager["87"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
			MenuManager["87"]["Image"] = [[rbxassetid://82602038832292]];
			MenuManager["87"]["Size"] = UDim2.new(1, 0, 1, 0);
			MenuManager["87"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
			MenuManager["87"]["BackgroundTransparency"] = 1;
			MenuManager["87"]["Name"] = [[UserIcon]];

			-- StarterGui.DisplayEraGui.MainWindow.Background.ContentHolder.AnimationHolder.StartsScrolling.WelcomeHolder.Information.Frame.UserIcon.UICorner
			MenuManager["88"] = Instance.new("UICorner", MenuManager["87"]);
			MenuManager["88"]["CornerRadius"] = UDim.new(0, 15);

			-- StarterGui.DisplayEraGui.MainWindow.Background.ContentHolder.AnimationHolder.StartsScrolling.WelcomeHolder.Information.Frame.UIStroke
			MenuManager["89"] = Instance.new("UIStroke", MenuManager["86"]);
			MenuManager["89"]["Transparency"] = 0.5;
			MenuManager["89"]["Color"] = Color3.fromRGB(81, 81, 81);

			-- StarterGui.DisplayEraGui.MainWindow.Background.ContentHolder.AnimationHolder.StartsScrolling.WelcomeHolder.Information.Frame.UICorner
			MenuManager["8a"] = Instance.new("UICorner", MenuManager["86"]);

			-- StarterGui.DisplayEraGui.MainWindow.Background.ContentHolder.AnimationHolder.StartsScrolling.WelcomeHolder.Information.TextHolder
			MenuManager["8b"] = Instance.new("Frame", MenuManager["82"]);
			MenuManager["8b"]["BorderSizePixel"] = 0;
			MenuManager["8b"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
			MenuManager["8b"]["Size"] = UDim2.new(0.7, 0, 1, 0);
			MenuManager["8b"]["Position"] = UDim2.new(0.29709, 0, 0, 0);
			MenuManager["8b"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
			MenuManager["8b"]["Name"] = [[TextHolder]];
			MenuManager["8b"]["BackgroundTransparency"] = 1;


			-- StarterGui.DisplayEraGui.MainWindow.Background.ContentHolder.AnimationHolder.StartsScrolling.WelcomeHolder.Information.TextHolder.UIListLayout
			MenuManager["8c"] = Instance.new("UIListLayout", MenuManager["8b"]);
			MenuManager["8c"]["Padding"] = UDim.new(0, 1);
			MenuManager["8c"]["SortOrder"] = Enum.SortOrder.LayoutOrder;

			-- StarterGui.DisplayEraGui.MainWindow.Background.ContentHolder.AnimationHolder.StartsScrolling.WelcomeHolder.Information.TextHolder.Text
			MenuManager["8d"] = Instance.new("TextLabel", MenuManager["8b"]);
			MenuManager["8d"]["TextWrapped"] = true;
			MenuManager["8d"]["TextTruncate"] = Enum.TextTruncate.SplitWord;
			MenuManager["8d"]["BorderSizePixel"] = 0;
			MenuManager["8d"]["TextXAlignment"] = Enum.TextXAlignment.Left;
			MenuManager["8d"]["TextYAlignment"] = Enum.TextYAlignment.Top;
			MenuManager["8d"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
			MenuManager["8d"]["TextSize"] = 17;
			MenuManager["8d"]["FontFace"] = Font.new([[rbxassetid://12187365364]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
			MenuManager["8d"]["TextColor3"] = Color3.fromRGB(241, 241, 241);
			MenuManager["8d"]["BackgroundTransparency"] = 1;
			MenuManager["8d"]["Size"] = UDim2.new(0.992, 0, 0, 18);
			MenuManager["8d"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
			MenuManager["8d"]["Text"] = [[Information:]];
			MenuManager["8d"]["Name"] = [[Text]];
			MenuManager["8d"]["Position"] = UDim2.new(0.3, 0, 0, 0);


			-- StarterGui.DisplayEraGui.MainWindow.Background.ContentHolder.AnimationHolder.StartsScrolling.WelcomeHolder.Information.TextHolder.Info2
			MenuManager["8e"] = Instance.new("TextLabel", MenuManager["8b"]);
			MenuManager["8e"]["TextWrapped"] = true;
			MenuManager["8e"]["TextTruncate"] = Enum.TextTruncate.SplitWord;
			MenuManager["8e"]["BorderSizePixel"] = 0;
			MenuManager["8e"]["TextXAlignment"] = Enum.TextXAlignment.Left;
			MenuManager["8e"]["TextYAlignment"] = Enum.TextYAlignment.Top;
			MenuManager["8e"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
			MenuManager["8e"]["TextSize"] = 17;
			MenuManager["8e"]["FontFace"] = Font.new([[rbxassetid://12187365364]], Enum.FontWeight.SemiBold, Enum.FontStyle.Normal);
			MenuManager["8e"]["TextColor3"] = Color3.fromRGB(241, 241, 241);
			MenuManager["8e"]["BackgroundTransparency"] = 1;
			MenuManager["8e"]["Size"] = UDim2.new(0.992, 0, 0, 18);
			MenuManager["8e"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
			MenuManager["8e"]["Text"] = [[Injected Count: 50]];
			MenuManager["8e"]["LayoutOrder"] = 2;
			MenuManager["8e"]["Name"] = [[Info2]];
			MenuManager["8e"]["Position"] = UDim2.new(0.3, 0, 0, 0);


			-- StarterGui.DisplayEraGui.MainWindow.Background.ContentHolder.AnimationHolder.StartsScrolling.WelcomeHolder.Information.TextHolder.Info3
			MenuManager["8f"] = Instance.new("TextLabel", MenuManager["8b"]);
			MenuManager["8f"]["TextWrapped"] = true;
			MenuManager["8f"]["TextTruncate"] = Enum.TextTruncate.SplitWord;
			MenuManager["8f"]["BorderSizePixel"] = 0;
			MenuManager["8f"]["TextXAlignment"] = Enum.TextXAlignment.Left;
			MenuManager["8f"]["TextYAlignment"] = Enum.TextYAlignment.Top;
			MenuManager["8f"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
			MenuManager["8f"]["TextSize"] = 17;
			MenuManager["8f"]["FontFace"] = Font.new([[rbxassetid://12187365364]], Enum.FontWeight.SemiBold, Enum.FontStyle.Normal);
			MenuManager["8f"]["TextColor3"] = Color3.fromRGB(241, 241, 241);
			MenuManager["8f"]["BackgroundTransparency"] = 1;
			MenuManager["8f"]["Size"] = UDim2.new(0.992, 0, 0, 18);
			MenuManager["8f"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
			MenuManager["8f"]["Text"] = [[Last Updated: 30.11.2024]];
			MenuManager["8f"]["LayoutOrder"] = 2;
			MenuManager["8f"]["Name"] = [[Info3]];
			MenuManager["8f"]["Position"] = UDim2.new(0.3, 0, 0, 0);


			-- StarterGui.DisplayEraGui.MainWindow.Background.ContentHolder.AnimationHolder.StartsScrolling.WelcomeHolder.Information.TextHolder.PremInfo
			MenuManager["90"] = Instance.new("TextLabel", MenuManager["8b"]);
			MenuManager["90"]["BorderSizePixel"] = 0;
			MenuManager["90"]["TextXAlignment"] = Enum.TextXAlignment.Left;
			MenuManager["90"]["TextYAlignment"] = Enum.TextYAlignment.Top;
			MenuManager["90"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
			MenuManager["90"]["TextSize"] = 16;
			MenuManager["90"]["FontFace"] = Font.new([[rbxassetid://12187365364]], Enum.FontWeight.SemiBold, Enum.FontStyle.Normal);
			MenuManager["90"]["TextColor3"] = Color3.fromRGB(241, 241, 241);
			MenuManager["90"]["BackgroundTransparency"] = 1;
			MenuManager["90"]["Size"] = UDim2.new(1, 0, 0, 18);
			MenuManager["90"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
			MenuManager["90"]["Text"] = [[Key Expires At: 12h]];
			MenuManager["90"]["LayoutOrder"] = 1;
			MenuManager["90"]["Name"] = [[PremInfo]];
			MenuManager["90"]["Position"] = UDim2.new(0.3, 0, 0.3, 0);

			-- StarterGui.DisplayEraGui.MainWindow.Background.ContentHolder.AnimationHolder.StartsScrolling.WelcomeHolder.Information.UIGradient
			MenuManager["91"] = Instance.new("UIGradient", MenuManager["82"]);
			MenuManager["91"]["Rotation"] = 60;
			MenuManager["91"]["Transparency"] = NumberSequence.new{NumberSequenceKeypoint.new(0.000, 0),NumberSequenceKeypoint.new(1.000, 0.7125)};
		end

		-- Status
		do
			-- StarterGui.DisplayEraGui.MainWindow.Background.ContentHolder.AnimationHolder.StartsScrolling.WelcomeHolder.Status
			MenuManager["92"] = Instance.new("Frame", MenuManager["81"]);
			MenuManager["92"]["Active"] = true;
			MenuManager["92"]["BorderSizePixel"] = 0;
			MenuManager["92"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
			MenuManager["92"]["Size"] = UDim2.new(0.33, 0, 0, 95);
			MenuManager["92"]["Position"] = UDim2.new(0.721, 0, 0, 0);
			MenuManager["92"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
			MenuManager["92"]["Name"] = [[Status]];
			MenuManager["92"]["LayoutOrder"] = 2;
			MenuManager["92"]["BackgroundTransparency"] = 0.92;

			-- StarterGui.DisplayEraGui.MainWindow.Background.ContentHolder.AnimationHolder.StartsScrolling.WelcomeHolder.Status.UICorner
			MenuManager["93"] = Instance.new("UICorner", MenuManager["92"]);

			-- StarterGui.DisplayEraGui.MainWindow.Background.ContentHolder.AnimationHolder.StartsScrolling.WelcomeHolder.Status.UIStroke
			MenuManager["94"] = Instance.new("UIStroke", MenuManager["92"]);
			MenuManager["94"]["Transparency"] = 0.5;
			MenuManager["94"]["Color"] = Color3.fromRGB(81, 81, 81);

			-- StarterGui.DisplayEraGui.MainWindow.Background.ContentHolder.AnimationHolder.StartsScrolling.WelcomeHolder.Status.UIPadding
			MenuManager["95"] = Instance.new("UIPadding", MenuManager["92"]);
			MenuManager["95"]["PaddingTop"] = UDim.new(0, 7);
			MenuManager["95"]["PaddingRight"] = UDim.new(0, 7);
			MenuManager["95"]["PaddingLeft"] = UDim.new(0, 7);
			MenuManager["95"]["PaddingBottom"] = UDim.new(0, 7);

			-- StarterGui.DisplayEraGui.MainWindow.Background.ContentHolder.AnimationHolder.StartsScrolling.WelcomeHolder.Status.TextHolder
			MenuManager["96"] = Instance.new("Frame", MenuManager["92"]);
			MenuManager["96"]["BorderSizePixel"] = 0;
			MenuManager["96"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
			MenuManager["96"]["Size"] = UDim2.new(1, 0, 1, 0);
			MenuManager["96"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
			MenuManager["96"]["Name"] = [[TextHolder]];
			MenuManager["96"]["BackgroundTransparency"] = 1;

			-- StarterGui.DisplayEraGui.MainWindow.Background.ContentHolder.AnimationHolder.StartsScrolling.WelcomeHolder.Status.TextHolder.UIListLayout
			MenuManager["97"] = Instance.new("UIListLayout", MenuManager["96"]);
			MenuManager["97"]["SortOrder"] = Enum.SortOrder.LayoutOrder;

			-- StarterGui.DisplayEraGui.MainWindow.Background.ContentHolder.AnimationHolder.StartsScrolling.WelcomeHolder.Status.TextHolder.Tarif
			MenuManager["98"] = Instance.new("TextLabel", MenuManager["96"]);
			MenuManager["98"]["BorderSizePixel"] = 0;
			MenuManager["98"]["TextYAlignment"] = Enum.TextYAlignment.Top;
			MenuManager["98"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
			MenuManager["98"]["TextSize"] = 17;
			MenuManager["98"]["FontFace"] = Font.new([[rbxassetid://12187365364]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
			MenuManager["98"]["TextColor3"] = Color3.fromRGB(241, 241, 241);
			MenuManager["98"]["BackgroundTransparency"] = 1;
			MenuManager["98"]["Size"] = UDim2.new(1, 0, 0, 20);
			MenuManager["98"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
			MenuManager["98"]["Text"] = [[Your Subscription:]];
			MenuManager["98"]["Name"] = [[Tarif]];

			-- StarterGui.DisplayEraGui.MainWindow.Background.ContentHolder.AnimationHolder.StartsScrolling.WelcomeHolder.Status.TextHolder.CurrentTarif
			MenuManager["99"] = Instance.new("TextLabel", MenuManager["96"]);
			MenuManager["99"]["BorderSizePixel"] = 0;
			MenuManager["99"]["TextYAlignment"] = Enum.TextYAlignment.Top;
			MenuManager["99"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
			MenuManager["99"]["TextSize"] = 17;
			MenuManager["99"]["FontFace"] = Font.new([[rbxassetid://12187365364]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
			MenuManager["99"]["BackgroundTransparency"] = 1;
			MenuManager["99"]["Size"] = UDim2.new(1, 0, 0, 20);
			MenuManager["99"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
			MenuManager["99"]["Text"] = [[Freemium]];
			MenuManager["99"]["Name"] = [[IgnoreCurrentTarif]];
			MenuManager["99"]["TextColor3"] = Color3.fromRGB(6, 222, 21);

			-- StarterGui.DisplayEraGui.MainWindow.Background.ContentHolder.AnimationHolder.StartsScrolling.WelcomeHolder.Status.TextHolder.ButtonHolder
			MenuManager["9a"] = Instance.new("Frame", MenuManager["96"]);
			MenuManager["9a"]["Active"] = true;
			MenuManager["9a"]["BorderSizePixel"] = 0;
			MenuManager["9a"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
			MenuManager["9a"]["Size"] = UDim2.new(1, 0, 0, 40);
			MenuManager["9a"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
			MenuManager["9a"]["Name"] = [[ButtonHolder]];
			MenuManager["9a"]["BackgroundTransparency"] = 1;

			-- StarterGui.DisplayEraGui.MainWindow.Background.ContentHolder.AnimationHolder.StartsScrolling.WelcomeHolder.Status.TextHolder.ButtonHolder.Discord
			MenuManager["9b"] = Instance.new("TextButton", MenuManager["9a"]);
			MenuManager["9b"]["BorderSizePixel"] = 0;
			MenuManager["9b"]["Modal"] = true;
			MenuManager["9b"]["AutoButtonColor"] = false;
			MenuManager["9b"]["TextSize"] = 14;
			MenuManager["9b"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
			MenuManager["9b"]["BackgroundColor3"] = Color3.fromRGB(71, 81, 199);
			MenuManager["9b"]["FontFace"] = Font.new([[rbxassetid://12187365364]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
			MenuManager["9b"]["AnchorPoint"] = Vector2.new(0, 1);
			MenuManager["9b"]["Size"] = UDim2.new(1, 0, 0.7, 0);
			MenuManager["9b"]["Name"] = [[IgnoreDiscord]];
			MenuManager["9b"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
			MenuManager["9b"]["Text"] = [[Buy Premium Here]];
			MenuManager["9b"]["Position"] = UDim2.new(0, 0, 1, 0);

			-- StarterGui.DisplayEraGui.MainWindow.Background.ContentHolder.AnimationHolder.StartsScrolling.WelcomeHolder.Status.TextHolder.ButtonHolder.Discord.UIGradient
			MenuManager["9c"] = Instance.new("UIGradient", MenuManager["9b"]);
			MenuManager["9c"]["Enabled"] = false;
			MenuManager["9c"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(84, 94, 236)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(71, 81, 199))};

			-- StarterGui.DisplayEraGui.MainWindow.Background.ContentHolder.AnimationHolder.StartsScrolling.WelcomeHolder.Status.TextHolder.ButtonHolder.Discord.UICorner
			MenuManager["9d"] = Instance.new("UICorner", MenuManager["9b"]);
			MenuManager["9d"]["CornerRadius"] = UDim.new(0, 5);

			-- StarterGui.DisplayEraGui.MainWindow.Background.ContentHolder.AnimationHolder.StartsScrolling.WelcomeHolder.Status.UIGradient
			MenuManager["9e"] = Instance.new("UIGradient", MenuManager["92"]);
			MenuManager["9e"]["Rotation"] = -240;
			MenuManager["9e"]["Transparency"] = NumberSequence.new{NumberSequenceKeypoint.new(0.000, 0),NumberSequenceKeypoint.new(1.000, 0.89375)};
		end
	end

	-- Starting Infos Here 

	do
		if options.isPremium then
			MenuManager["99"]["Text"] = "Premium"
			MenuManager["99"]["TextColor3"] = Color3.fromRGB(24, 147, 255)
		else
			MenuManager["99"]["Text"] = "Freemium"
			MenuManager["99"]["TextColor3"] = Color3.fromRGB(6, 222, 21)
		end

		MenuManager["9b"].MouseButton1Click:Connect(function()
			toclipboard("https://discord.com/invite/erahub")
			pcall(function()
				local response = http_request({
					Url = "http://127.0.0.1:6463/rpc?v=1",
					 Method = "POST",
					Headers = {
						["Content-Type"] = "application/json",
						Origin = "https://discord.com"
					},
					Body = game:GetService("HttpService"):JSONEncode({
						cmd = "INVITE_BROWSER",
						nonce = game:GetService("HttpService"):GenerateGUID(false),
						args = {code = "erahub"}
					})
				})
			end)
			MenuManager.Notify:NewNotify("Era Hub", "Copied Discord Invite!", 4)
		end)
	end

	--Menu Main.TopBar

	do
		-- StarterGui.EraGui.MainWindow.Background.TopBar
		MenuManager["23"] = Instance.new("Frame", MenuManager["3"]);
		MenuManager["23"]["ZIndex"] = 2;
		MenuManager["23"]["BorderSizePixel"] = 0;
		MenuManager["23"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
		MenuManager["23"]["Size"] = UDim2.new(1, 0, 0, 40);
		MenuManager["23"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
		MenuManager["23"]["Name"] = [[TopBar]];
		MenuManager["23"]["BackgroundTransparency"] = 1;

		-- StarterGui.EraGui.MainWindow.Background.TopBar.CloseButton
		MenuManager["24"] = Instance.new("TextButton", MenuManager["23"]);
		MenuManager["24"]["BorderSizePixel"] = 0;
		MenuManager["24"]["AutoButtonColor"] = false;
		MenuManager["24"]["TextSize"] = 14;
		MenuManager["24"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
		MenuManager["24"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
		MenuManager["24"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
		MenuManager["24"]["AnchorPoint"] = Vector2.new(1, 0);
		MenuManager["24"]["Size"] = UDim2.new(0, 32, 0, 32);
		MenuManager["24"]["BackgroundTransparency"] = 1;
		MenuManager["24"]["Name"] = [[CloseButton]];
		MenuManager["24"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
		MenuManager["24"]["Text"] = [[]];
		MenuManager["24"]["Position"] = UDim2.new(1, -7, 0, 4);

		-- StarterGui.EraGui.MainWindow.Background.TopBar.CloseButton.icon
		MenuManager["25"] = Instance.new("ImageLabel", MenuManager["24"]);
		MenuManager["25"]["BorderSizePixel"] = 0;
		MenuManager["25"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
		MenuManager["25"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
		MenuManager["25"]["Image"] = [[rbxassetid://9886659671]];
		MenuManager["25"]["Size"] = UDim2.new(0, 16, 0, 16);
		MenuManager["25"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
		MenuManager["25"]["BackgroundTransparency"] = 1;
		MenuManager["25"]["Name"] = [[icon]];
		MenuManager["25"]["Position"] = UDim2.new(0.5, 0, 0.5, 0);

		-- StarterGui.EraGui.MainWindow.Background.TopBar.CloseButton.UICorner
		MenuManager["26"] = Instance.new("UICorner", MenuManager["24"]);

		-- StarterGui.EraGui.MainWindow.Background.TopBar.MinimizeButton
		MenuManager["27"] = Instance.new("TextButton", MenuManager["23"]);
		MenuManager["27"]["BorderSizePixel"] = 0;
		MenuManager["27"]["AutoButtonColor"] = false;
		MenuManager["27"]["TextSize"] = 14;
		MenuManager["27"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
		MenuManager["27"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
		MenuManager["27"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
		MenuManager["27"]["AnchorPoint"] = Vector2.new(1, 0);
		MenuManager["27"]["Size"] = UDim2.new(0, 32, 0, 32);
		MenuManager["27"]["BackgroundTransparency"] = 1;
		MenuManager["27"]["Name"] = [[MinimizeButton]];
		MenuManager["27"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
		MenuManager["27"]["Text"] = [[]];
		MenuManager["27"]["Position"] = UDim2.new(1, -45, 0, 4);

		-- StarterGui.EraGui.MainWindow.Background.TopBar.MinimizeButton.icon
		MenuManager["28"] = Instance.new("ImageLabel", MenuManager["27"]);
		MenuManager["28"]["BorderSizePixel"] = 0;
		MenuManager["28"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
		MenuManager["28"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
		MenuManager["28"]["Image"] = [[rbxassetid://9886659276]];
		MenuManager["28"]["Size"] = UDim2.new(0, 16, 0, 16);
		MenuManager["28"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
		MenuManager["28"]["BackgroundTransparency"] = 1;
		MenuManager["28"]["Name"] = [[icon]];
		MenuManager["28"]["Position"] = UDim2.new(0.5, 0, 0.5, 1);

		-- StarterGui.EraGui.MainWindow.Background.TopBar.MinimizeButton.UICorner
		MenuManager["29"] = Instance.new("UICorner", MenuManager["27"]);

		-- StarterGui.EraGui.MainWindow.Background.TopBar.TextHolder
		MenuManager["2a"] = Instance.new("Frame", MenuManager["23"]);
		MenuManager["2a"]["BorderSizePixel"] = 0;
		MenuManager["2a"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
		MenuManager["2a"]["AnchorPoint"] = Vector2.new(1, 0);
		MenuManager["2a"]["Size"] = UDim2.new(1, -16, 1, 0);
		MenuManager["2a"]["Position"] = UDim2.new(1, 0, 0, 0);
		MenuManager["2a"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
		MenuManager["2a"]["Name"] = [[TextHolder]];
		MenuManager["2a"]["BackgroundTransparency"] = 1;

		-- StarterGui.EraGui.MainWindow.Background.TopBar.TextHolder.Name
		MenuManager["2b"] = Instance.new("TextLabel", MenuManager["2a"]);
		MenuManager["2b"]["BorderSizePixel"] = 0;
		MenuManager["2b"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
		MenuManager["2b"]["TextSize"] = 15;
		MenuManager["2b"]["FontFace"] = Font.new([[rbxassetid://12187365364]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
		MenuManager["2b"]["TextColor3"] = Color3.fromRGB(251, 251, 251);
		MenuManager["2b"]["BackgroundTransparency"] = 1;
		MenuManager["2b"]["Size"] = UDim2.new(0, 0, 1, 0);
		MenuManager["2b"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
		MenuManager["2b"]["Text"] = options.Name;
		MenuManager["2b"]["AutomaticSize"] = Enum.AutomaticSize.X;
		MenuManager["2b"]["Name"] = [[Name]];

		-- StarterGui.EraGui.MainWindow.Background.TopBar.TextHolder.UIListLayout
		MenuManager["2c"] = Instance.new("UIListLayout", MenuManager["2a"]);
		MenuManager["2c"]["Padding"] = UDim.new(0, 4);
		MenuManager["2c"]["SortOrder"] = Enum.SortOrder.LayoutOrder;
		MenuManager["2c"]["FillDirection"] = Enum.FillDirection.Horizontal;

		-- StarterGui.EraGui.MainWindow.Background.TopBar.TextHolder.Title
		MenuManager["2d"] = Instance.new("TextLabel", MenuManager["2a"]);
		MenuManager["2d"]["BorderSizePixel"] = 0;
		MenuManager["2d"]["TextTransparency"] = 0.4;
		MenuManager["2d"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
		MenuManager["2d"]["TextSize"] = 15;
		MenuManager["2d"]["FontFace"] = Font.new([[rbxassetid://12187365364]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
		MenuManager["2d"]["TextColor3"] = Color3.fromRGB(251, 251, 251);
		MenuManager["2d"]["BackgroundTransparency"] = 1;
		MenuManager["2d"]["Size"] = UDim2.new(0, 0, 1, 0);
		MenuManager["2d"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
		MenuManager["2d"]["Text"] = options.SubTitle;
		MenuManager["2d"]["AutomaticSize"] = Enum.AutomaticSize.X;
		MenuManager["2d"]["Name"] = [[Title]];
	end

	--Menu Main.Tabs

	do
		-- StarterGui.EraGui.MainWindow.Background.Tabs
		MenuManager["c"] = Instance.new("Frame", MenuManager["3"]);
		MenuManager["c"]["ZIndex"] = 2;
		MenuManager["c"]["BorderSizePixel"] = 0;
		MenuManager["c"]["BackgroundColor3"] = Color3.fromRGB(10, 10, 14);
		MenuManager["c"]["ClipsDescendants"] = true;
		MenuManager["c"]["Size"] = UDim2.new(0, 180, 1, 0);
		MenuManager["c"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
		MenuManager["c"]["Name"] = [[Tabs]];
		MenuManager["c"]["BackgroundTransparency"] = 1;

		-- StarterGui.EraGui.MainWindow.Background.Tabs.UICorner
		MenuManager["d"] = Instance.new("UICorner", MenuManager["c"]);

		-- StarterGui.EraGui.MainWindow.Background.Tabs.TabsHolder
		MenuManager["e"] = Instance.new("Frame", MenuManager["c"]);
		MenuManager["e"]["BorderSizePixel"] = 0;
		MenuManager["e"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
		MenuManager["e"]["Size"] = UDim2.new(1, -25, 1, -140);
		MenuManager["e"]["Position"] = UDim2.new(0, 13, 0, 50);
		MenuManager["e"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
		MenuManager["e"]["Name"] = [[TabsHolder]];
		MenuManager["e"]["BackgroundTransparency"] = 1;

		-- StarterGui.EraGui.MainWindow.Background.Tabs.TabsHolder.ScrollingFrame
		MenuManager["f"] = Instance.new("ScrollingFrame", MenuManager["e"]);
		MenuManager["f"]["ScrollingDirection"] = Enum.ScrollingDirection.Y;
		MenuManager["f"]["BorderSizePixel"] = 0;
		MenuManager["f"]["CanvasSize"] = UDim2.new(0, 0, 0, 0);
		MenuManager["f"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
		MenuManager["f"]["AutomaticCanvasSize"] = Enum.AutomaticSize.Y;
		MenuManager["f"]["Size"] = UDim2.new(1, 0, 1, 0);
		MenuManager["f"]["ScrollBarImageColor3"] = Color3.fromRGB(0, 0, 0);
		MenuManager["f"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
		MenuManager["f"]["ScrollBarThickness"] = 0;
		MenuManager["f"]["BackgroundTransparency"] = 1;

		-- StarterGui.EraGui.MainWindow.Background.Tabs.TabsHolder.ScrollingFrame.UIListLayout
		MenuManager["10"] = Instance.new("UIListLayout", MenuManager["f"]);
		MenuManager["10"]["HorizontalAlignment"] = Enum.HorizontalAlignment.Center;
		MenuManager["10"]["Padding"] = UDim.new(0, 3);
		MenuManager["10"]["SortOrder"] = Enum.SortOrder.LayoutOrder;


	end

	--Menu Main.Tabs.Settings

	do
		-- StarterGui.EraGui.MainWindow.Background.Tabs.Settings
		MenuManager["1d"] = Instance.new("Frame", MenuManager["c"]);
		MenuManager["1d"]["BorderSizePixel"] = 0;
		MenuManager["1d"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
		MenuManager["1d"]["Size"] = UDim2.new(1, -25, 1, -375);
		MenuManager["1d"]["Position"] = UDim2.new(0, 13, 1, -89);
		MenuManager["1d"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
		MenuManager["1d"]["Name"] = [[Settings]];
		MenuManager["1d"]["BackgroundTransparency"] = 1;

		-- StarterGui.EraGui.MainWindow.Background.Tabs.Settings.Line
		MenuManager["1e"] = Instance.new("Frame", MenuManager["1d"]);
		MenuManager["1e"]["BorderSizePixel"] = 0;
		MenuManager["1e"]["BackgroundColor3"] = Color3.fromRGB(79, 82, 87);
		MenuManager["1e"]["Size"] = UDim2.new(1, 0, 0, 1);
		MenuManager["1e"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
		MenuManager["1e"]["Name"] = [[Line]];

		MenuManager["1i"] = Instance.new("UIListLayout", MenuManager["1d"]);
		MenuManager["1i"]["Padding"] = UDim.new(0,5)
	end

	--Methods /// ELEMENTS FUNCTIONALITY

	do
		function MenuManager:CreateTab(options)
			options = EraGui:validate({
				Title = "Tab",
				Icon = "",
				Parent = MenuManager["f"],
				InitFirst = true,
			}, options or {})

			local Tab = {
				Hover = false,
				Active = false,
			}
			-- rbxassetid://91439126269700
			--RENDER TABS

			do
				-- StarterGui.EraGui.MainWindow.Background.Tabs.TabsHolder.ScrollingFrame.InactiveTab
				Tab["19"] = Instance.new("TextLabel", options.Parent);
				Tab["19"]["BorderSizePixel"] = 0;
				Tab["19"]["TextSize"] = 14;
				Tab["19"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
				Tab["19"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
				Tab["19"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
				Tab["19"]["Size"] = UDim2.new(1, 0, 0, 34);
				Tab["19"]["BackgroundTransparency"] = 1;
				Tab["19"]["Name"] = [[Tab]];
				Tab["19"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
				Tab["19"]["Text"] = [[]];

				-- StarterGui.EraGui.MainWindow.Background.Tabs.TabsHolder.ScrollingFrame.InactiveTab.UICorner
				Tab["1a"] = Instance.new("UICorner", Tab["19"]);

				-- StarterGui.EraGui.MainWindow.Background.Tabs.TabsHolder.ScrollingFrame.InactiveTab.Title
				Tab["1b"] = Instance.new("TextLabel", Tab["19"]);
				Tab["1b"]["BorderSizePixel"] = 0;
				Tab["1b"]["TextXAlignment"] = Enum.TextXAlignment.Left;
				Tab["1b"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
				Tab["1b"]["TextSize"] = 14;
				Tab["1b"]["FontFace"] = Font.new([[rbxassetid://12187365364]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
				Tab["1b"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
				Tab["1b"]["BackgroundTransparency"] = 1;
				Tab["1b"]["AnchorPoint"] = Vector2.new(0, 0.5);
				Tab["1b"]["Size"] = UDim2.new(1, -12, 1, 0);
				Tab["1b"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
				Tab["1b"]["Text"] = options.Title;
				Tab["1b"]["Name"] = [[Title]];
				Tab["1b"]["Position"] = UDim2.new(0, 30, 0.5, 0);

				-- StarterGui.EraGui.MainWindow.Background.Tabs.TabsHolder.ScrollingFrame.InactiveTab.Icon
				Tab["1c"] = Instance.new("ImageLabel", Tab["19"]);
				Tab["1c"]["BorderSizePixel"] = 0;
				Tab["1c"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
				Tab["1c"]["AnchorPoint"] = Vector2.new(0, 0.5);
				Tab["1c"]["Image"] = options.Icon;
				Tab["1c"]["Size"] = UDim2.new(0, 16, 0, 16);
				Tab["1c"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
				Tab["1c"]["BackgroundTransparency"] = 1;
				Tab["1c"]["Name"] = [[Icon]];
				Tab["1c"]["Position"] = UDim2.new(0, 8, 0.5, 0);

				-- StarterGui.EraGui.MainWindow.Background.ContentHolder.AnimationHolder.ScrollingFrame
				Tab["30"] = Instance.new("ScrollingFrame", MenuManager["2f"]);
				Tab["30"]["ScrollingDirection"] = Enum.ScrollingDirection.Y;
				Tab["30"]["BorderSizePixel"] = 0;
				Tab["30"]["CanvasSize"] = UDim2.new(0, 0, 0, -5);
				Tab["30"]["CanvasPosition"] = Vector2.new(0, 58);
				Tab["30"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
				Tab["30"]["ScrollBarImageTransparency"] = 0.1;
				Tab["30"]["HorizontalScrollBarInset"] = Enum.ScrollBarInset.Always;
				Tab["30"]["AutomaticCanvasSize"] = Enum.AutomaticSize.Y;
				Tab["30"]["Size"] = UDim2.new(1, 0, 1, 0);
				Tab["30"]["ScrollBarImageColor3"] = Color3.fromRGB(121, 121, 121);
				Tab["30"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
				Tab["30"]["ScrollBarThickness"] = 3;
				Tab["30"]["BackgroundTransparency"] = 1;
				Tab["30"]["Visible"] = false;

				-- StarterGui.EraGui.MainWindow.Background.ContentHolder.AnimationHolder.ScrollingFrame.UIListLayout
				Tab["31"] = Instance.new("UIListLayout", Tab["30"]);
				Tab["31"]["HorizontalAlignment"] = Enum.HorizontalAlignment.Center;
				Tab["31"]["HorizontalFlex"] = Enum.UIFlexAlignment.Fill
				Tab["31"]["Padding"] = UDim.new(0, 15);
				Tab["31"]["SortOrder"] = Enum.SortOrder.LayoutOrder;
				Tab["31"]["FillDirection"] = Enum.FillDirection.Horizontal;

				-- StarterGui.EraGui.MainWindow.Background.ContentHolder.AnimationHolder.ScrollingFrame.UIPadding
				Tab["32"] = Instance.new("UIPadding", Tab["30"]);
				Tab["32"]["PaddingRight"] = UDim.new(0, 9);
				Tab["32"]["PaddingLeft"] = UDim.new(0, 5);
				Tab["32"]["PaddingBottom"] = UDim.new(0, 5);
			end

			-- METHODS
			
			do
				function Tab:Activate()
					if not Tab.Active then 
						if MenuManager.CurrentTab ~= nil and MenuManager.CurrentTab ~= "StartingPage" then
							MenuManager.CurrentTab:Deactivate()
						elseif MenuManager.CurrentTab == "StartingPage" then
							tweenService:Create(MenuManager["2f"], TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut), {GroupTransparency = 1}):Play()
							wait(.2)

							MenuManager["7d"].Visible = false

							Tab.Active = true	
							MenuManager.CurrentTab = Tab
						end			

						EraGui:SetTransparency(Tab["19"], 0.85)

						Tab.Active = true			
						tweenService:Create(MenuManager["2f"], TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut), {GroupTransparency = 0}):Play()
						Tab["30"].Visible = true
						MenuManager.CurrentTab = Tab
					end
				end

				function Tab:Deactivate()
					if Tab.Active then

						EraGui:SetTransparency(Tab["19"], 1)
						tweenService:Create(MenuManager["2f"], TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut), {GroupTransparency = 1}):Play()
						wait(.2)
						Tab["30"].Visible = false
						Tab.Active = false
					end
				end

			end

			--LOGIC CODE

			do
				Tab["19"].MouseEnter:Connect(function()
					Tab.Hover = true

					if not Tab.Active  then
						EraGui:SetTransparency(Tab["19"], 0.92)
					end
				end)

				Tab["19"].MouseLeave:Connect(function()
					Tab.Hover = false

					if not Tab.Active  then
						EraGui:SetTransparency(Tab["19"], 1)
					end
				end)

				uis.InputBegan:Connect(function(input, gpe)
					if gpe then return end

					if input.UserInputType == Enum.UserInputType.MouseButton1 then 
						if Tab.Hover then 
							EraGui:SetTransparency(Tab["19"], 0.89)
						end
					end
				end)

				uis.InputEnded:Connect(function(input, gpe)
					if gpe then return end

					if input.UserInputType == Enum.UserInputType.MouseButton1 then 
						if Tab.Hover then 
							EraGui:SetTransparency(Tab["19"], 0.85)
							Tab:Activate()
						end
					end
				end)

				if options.Icon == "" then
					tweenService:Create(Tab["1b"], TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut), {Position = UDim2.new(0, 8, 0.5, 0)}):Play()
				end

				if options.InitFirst  then
					if MenuManager.CurrentTab == nil then
						Tab:Activate()
					end
				end
			end

			--CATEGORIES

			function Tab:CreateCategory(options)
				options = EraGui:validate({
					Title = "Category";
				}, options or {})

				local Category = {

				}

				-- RENDERING CATEGORIES

				do
					-- StarterGui.EraGui.MainWindow.Background.ContentHolder.AnimationHolder.ScrollingFrame.Category
					Category["33"] = Instance.new("Frame", Tab["30"]);
					Category["33"]["BorderSizePixel"] = 0;
					Category["33"]["BackgroundColor3"] = Color3.fromRGB(107, 113, 121);
					Category["33"]["AutomaticSize"] = Enum.AutomaticSize.Y;
					Category["33"]["Size"] = UDim2.new(0.48, 0, 1, 0);
					Category["33"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
					Category["33"]["Name"] = [[Category]];
					Category["33"]["BackgroundTransparency"] = 1;

					-- StarterGui.EraGui.MainWindow.Background.ContentHolder.AnimationHolder.ScrollingFrame.Category.UICorner
					Category["34"] = Instance.new("UICorner", Category["33"]);

					-- StarterGui.EraGui.MainWindow.Background.ContentHolder.AnimationHolder.ScrollingFrame.Category.StartHeader
					Category["35"] = Instance.new("Frame", Category["33"]);
					Category["35"]["BorderSizePixel"] = 0;
					Category["35"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
					Category["35"]["Size"] = UDim2.new(1, 0, 0, 30);
					Category["35"]["Position"] = UDim2.new(0, -3, 0, 0);
					Category["35"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
					Category["35"]["Name"] = [[StartHeader]];
					Category["35"]["BackgroundTransparency"] = 1;

					-- StarterGui.EraGui.MainWindow.Background.ContentHolder.AnimationHolder.ScrollingFrame.Category.StartHeader.Title
					Category["36"] = Instance.new("TextLabel", Category["35"]);
					Category["36"]["BorderSizePixel"] = 0;
					Category["36"]["TextXAlignment"] = Enum.TextXAlignment.Left;
					Category["36"]["TextYAlignment"] = Enum.TextYAlignment.Top;
					Category["36"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
					Category["36"]["TextSize"] = 23;
					Category["36"]["FontFace"] = Font.new([[rbxassetid://12187365364]], Enum.FontWeight.Medium, Enum.FontStyle.Normal);
					Category["36"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
					Category["36"]["BackgroundTransparency"] = 1;
					Category["36"]["Size"] = UDim2.new(1, 0, 1, 0);
					Category["36"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
					Category["36"]["Text"] = options.Title;
					Category["36"]["Name"] = [[Title]];

					-- StarterGui.EraGui.MainWindow.Background.ContentHolder.AnimationHolder.ScrollingFrame.Category.StartHeader.Line
					Category["37"] = Instance.new("Frame", Category["35"]);
					Category["37"]["BorderSizePixel"] = 0;
					Category["37"]["BackgroundColor3"] = Color3.fromRGB(79, 82, 87);
					Category["37"]["Size"] = UDim2.new(1, 0, 0, 1);
					Category["37"]["Position"] = UDim2.new(0, 0, 1, 0);
					Category["37"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
					Category["37"]["Name"] = [[Line]];

					-- StarterGui.EraGui.MainWindow.Background.ContentHolder.AnimationHolder.ScrollingFrame.Category.UIListLayout
					Category["38"] = Instance.new("UIListLayout", Category["33"]);
					Category["38"]["Padding"] = UDim.new(0, 7);
					Category["38"]["SortOrder"] = Enum.SortOrder.LayoutOrder;
				end

				--FUNCTIONS

				do
					--/// HEADER
					function Category:CreateHeader(options)
						options = EraGui:validate({
							Title = "Header",
						}, options or {})

						local Header = {}

						-- ///DRAWING

						do
							-- StarterGui.EraGui.MainWindow.Background.ContentHolder.AnimationHolder.ScrollingFrame.Category.Header
							Header["73"] = Instance.new("Frame", Category["33"]);
							Header["73"]["BorderSizePixel"] = 0;
							Header["73"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
							Header["73"]["Size"] = UDim2.new(1, 0, 0, 25);
							Header["73"]["Position"] = UDim2.new(0, -3, 0, 0);
							Header["73"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
							Header["73"]["Name"] = [[Header]];
							Header["73"]["BackgroundTransparency"] = 1;


							-- StarterGui.EraGui.MainWindow.Background.ContentHolder.AnimationHolder.ScrollingFrame.Category.Header.Title
							Header["74"] = Instance.new("TextLabel", Header["73"]);
							Header["74"]["BorderSizePixel"] = 0;
							Header["74"]["TextXAlignment"] = Enum.TextXAlignment.Left;
							Header["74"]["TextYAlignment"] = Enum.TextYAlignment.Top;
							Header["74"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
							Header["74"]["TextSize"] = 20;
							Header["74"]["FontFace"] = Font.new([[rbxassetid://12187365364]], Enum.FontWeight.Medium, Enum.FontStyle.Normal);
							Header["74"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
							Header["74"]["BackgroundTransparency"] = 1;
							Header["74"]["AnchorPoint"] = Vector2.new(1, 0);
							Header["74"]["Size"] = UDim2.new(1, -1, 1, 0);
							Header["74"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
							Header["74"]["Text"] = options.Title;
							Header["74"]["Name"] = [[Title]];
							Header["74"]["Position"] = UDim2.new(1, 0, 0, 0);


							-- StarterGui.EraGui.MainWindow.Background.ContentHolder.AnimationHolder.ScrollingFrame.Category.Header.Line
							Header["75"] = Instance.new("Frame", Header["73"]);
							Header["75"]["BorderSizePixel"] = 0;
							Header["75"]["BackgroundColor3"] = Color3.fromRGB(79, 82, 87);
							Header["75"]["Size"] = UDim2.new(1, 0, 0, 1);
							Header["75"]["Position"] = UDim2.new(0, 0, 1, 0);
							Header["75"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
							Header["75"]["Name"] = [[Line]];
						end

						return Header
					end

					--/// LABEL
					function Category:CreateLabel(options)
						options = EraGui:validate({
							Title = "Label";
						}, options or {})

						local Label = {

						}

						-- // DRAWING Label

						do
							-- StarterGui.EraGui.MainWindow.Background.ContentHolder.AnimationHolder.ScrollingFrame.Category.Paragraph
							Label["76"] = Instance.new("Frame", Category["33"]);
							Label["76"]["BorderSizePixel"] = 0;
							Label["76"]["BackgroundColor3"] = MenuManager.SelectedTheme.ElementMain;
							Label["76"]["AnchorPoint"] = Vector2.new(1, 0);
							Label["76"]["Size"] = UDim2.new(1, 1, 0, 55);
							Label["76"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
							Label["76"]["Name"] = [[Label]];
							Label["76"]["BackgroundTransparency"] = MenuManager.SelectedTheme.ElementTransparency;

							-- StarterGui.EraGui.MainWindow.Background.ContentHolder.AnimationHolder.ScrollingFrame.Category.Paragraph.UICorner
							Label["77"] = Instance.new("UICorner", Label["76"]);

							-- StarterGui.EraGui.MainWindow.Background.ContentHolder.AnimationHolder.ScrollingFrame.Category.Paragraph.Title
							Label["78"] = Instance.new("TextLabel", Label["76"]);
							Label["78"]["TextWrapped"] = true;
							Label["78"]["BorderSizePixel"] = 0;
							Label["78"]["TextXAlignment"] = Enum.TextXAlignment.Left;
							Label["78"]["TextYAlignment"] = Enum.TextYAlignment.Top;
							Label["78"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
							Label["78"]["TextSize"] = 15;
							Label["78"]["FontFace"] = Font.new([[rbxassetid://12187365364]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
							Label["78"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
							Label["78"]["BackgroundTransparency"] = 1;
							Label["78"]["AnchorPoint"] = Vector2.new(1, 0);
							Label["78"]["Size"] = UDim2.new(1, -15, 1, -5);
							Label["78"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
							Label["78"]["Text"] = options.Title;
							Label["78"]["Name"] = [[Title]];
							Label["78"]["Position"] = UDim2.new(1, -5, 0, 5);

							-- StarterGui.EraGui.MainWindow.Background.ContentHolder.AnimationHolder.ScrollingFrame.Category.Paragraph.UIStroke
							Label["79"] = Instance.new("UIStroke", Label["76"]);
							Label["79"]["Transparency"] = 0.5;
							Label["79"]["Color"] = MenuManager.SelectedTheme.ElementBorder;

						end

						-- SOME LOGIC

						local function setSize()
							tweenService:Create(Label["76"], TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut), {Size = UDim2.new(1, 1, 0, Label["78"].TextBounds.Y+12);}):Play()
						end

						-- // METHODS

						function Label:SetText(text)
							Label["78"]["Text"] = text
							options.Title = text
							setSize()
						end

						setSize()

						return Label
					end

					--/// BUTTON
					function Category:CreateButton(options)
						options = EraGui:validate({
							Title = "Button";
							Callback = function() end;
						}, options or {})

						local Button = {
							Hover = false
						}

						--/// DRAWING BUTTON
						do

							-- StarterGui.EraGui.MainWindow.Background.ContentHolder.AnimationHolder.ScrollingFrame.Category.Button
							Button["6e"] = Instance.new("Frame", Category["33"]);
							Button["6e"]["BorderSizePixel"] = 0;
							Button["6e"]["BackgroundColor3"] = MenuManager.SelectedTheme.ElementMain;
							Button["6e"]["Size"] = UDim2.new(1, 0, 0, 30);
							Button["6e"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
							Button["6e"]["Name"] = [[Button]];
							Button["6e"]["BackgroundTransparency"] = MenuManager.SelectedTheme.ElementTransparency;


							-- StarterGui.EraGui.MainWindow.Background.ContentHolder.AnimationHolder.ScrollingFrame.Category.Button.Title
							Button["6f"] = Instance.new("TextLabel", Button["6e"]);
							Button["6f"]["TextWrapped"] = true;
							Button["6f"]["BorderSizePixel"] = 0;
							Button["6f"]["TextXAlignment"] = Enum.TextXAlignment.Left;
							Button["6f"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
							Button["6f"]["TextSize"] = 15;
							Button["6f"]["FontFace"] = Font.new([[rbxassetid://12187365364]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
							Button["6f"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
							Button["6f"]["BackgroundTransparency"] = 1;
							Button["6f"]["Size"] = UDim2.new(1, -40, 1, 0);
							Button["6f"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
							Button["6f"]["Text"] = options.Title;
							Button["6f"]["Name"] = [[Title]];
							Button["6f"]["Position"] = UDim2.new(0, 10, 0, 0);


							-- StarterGui.EraGui.MainWindow.Background.ContentHolder.AnimationHolder.ScrollingFrame.Category.Button.Icon
							Button["70"] = Instance.new("ImageLabel", Button["6e"]);
							Button["70"]["BorderSizePixel"] = 0;
							Button["70"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
							Button["70"]["AnchorPoint"] = Vector2.new(1, 0.5);
							Button["70"]["Image"] = [[rbxassetid://2777725930]];
							Button["70"]["Size"] = UDim2.new(0, 20, 0, 20);
							Button["70"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
							Button["70"]["BackgroundTransparency"] = 1;
							Button["70"]["Name"] = [[Icon]];
							Button["70"]["Position"] = UDim2.new(1, -5, 0.5, 0);


							-- StarterGui.EraGui.MainWindow.Background.ContentHolder.AnimationHolder.ScrollingFrame.Category.Button.UICorner
							Button["71"] = Instance.new("UICorner", Button["6e"]);
							Button["71"]["CornerRadius"] = UDim.new(0, 6);


							-- StarterGui.EraGui.MainWindow.Background.ContentHolder.AnimationHolder.ScrollingFrame.Category.Button.UIStroke
							Button["72"] = Instance.new("UIStroke", Button["6e"]);
							Button["72"]["Transparency"] = 0.5;
							Button["72"]["Color"] = MenuManager.SelectedTheme.ElementBorder;
						end

						--///LOGIC
						do
							Button["6e"].MouseEnter:Connect(function()
								Button.Hover = true

								EraGui:SetTransparency(Button["6e"], 0.89)
							end)
							Button["6e"].MouseLeave:Connect(function()
								Button.Hover = false

								EraGui:SetTransparency(Button["6e"], MenuManager.SelectedTheme.ElementTransparency)
							end)

							uis.InputBegan:Connect(function(input, gpe)
								if gpe then return end

								if input.UserInputType == Enum.UserInputType.MouseButton1 then 
									if Button.Hover then 
										EraGui:SetTransparency(Button["6e"], 0.85)
										local Success, Response = pcall(function()
											options.Callback()
										end)
										if not Success then
											MenuManager:ReportErrors(Response, options.Title)
										end
									end
								end
							end)

							uis.InputEnded:Connect(function(input, gpe)
								if gpe then return end

								if input.UserInputType == Enum.UserInputType.MouseButton1 then 
									EraGui:SetTransparency(Button["6e"], MenuManager.SelectedTheme.ElementTransparency)
								end
							end)
						end

						return Button
					end

					--/// TOGGLE
					function Category:CreateToggle(options)
						options = EraGui:validate({
							Title = "Toggle",
							Enabled = false,
							Callback = function(bool) end,
						}, options or {})

						MenuManager.Options[options.Title] = nil

						local Toggle = {
							State = options.Enabled;
							Hover = false;
							Type = "Toggle";
							Name = options.Title;
						}

						--/// DRAWING
						do
							-- StarterGui.EraGui.MainWindow.Background.ContentHolder.AnimationHolder.ScrollingFrame.Category.InactiveToggle
							Toggle["5c"] = Instance.new("Frame", Category["33"]);
							Toggle["5c"]["BorderSizePixel"] = 0;
							Toggle["5c"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
							Toggle["5c"]["Size"] = UDim2.new(1, 0, 0, 30);
							Toggle["5c"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
							Toggle["5c"]["Name"] = [[InactiveToggle]];
							Toggle["5c"]["BackgroundTransparency"] = 1;

							Toggle["5v"] = Instance.new("BoolValue", Toggle["5c"])
							Toggle["5v"]["Value"] = false

							-- StarterGui.EraGui.MainWindow.Background.ContentHolder.AnimationHolder.ScrollingFrame.Category.InactiveToggle.Title
							Toggle["5d"] = Instance.new("TextLabel", Toggle["5c"]);
							Toggle["5d"]["TextWrapped"] = true;
							Toggle["5d"]["BorderSizePixel"] = 0;
							Toggle["5d"]["TextXAlignment"] = Enum.TextXAlignment.Left;
							Toggle["5d"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
							Toggle["5d"]["TextSize"] = 15;
							Toggle["5d"]["FontFace"] = Font.new([[rbxassetid://12187365364]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
							Toggle["5d"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
							Toggle["5d"]["BackgroundTransparency"] = 1;
							Toggle["5d"]["Size"] = UDim2.new(1, -50, 1, 0);
							Toggle["5d"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
							Toggle["5d"]["Text"] = options.Title;
							Toggle["5d"]["Name"] = [[Title]];
							Toggle["5d"]["Position"] = UDim2.new(0, 10, 0, 0);

							-- StarterGui.EraGui.MainWindow.Background.ContentHolder.AnimationHolder.ScrollingFrame.Category.InactiveToggle.toggle
							Toggle["5e"] = Instance.new("Frame", Toggle["5c"]);
							Toggle["5e"]["BorderSizePixel"] = 0;
							Toggle["5e"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
							Toggle["5e"]["AnchorPoint"] = Vector2.new(1, 0.5);
							Toggle["5e"]["Size"] = UDim2.new(0, 32, 0, 17);
							Toggle["5e"]["Position"] = UDim2.new(1, 0, 0.5, 0);
							Toggle["5e"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
							Toggle["5e"]["Name"] = [[toggle]];
							Toggle["5e"]["BackgroundTransparency"] = 1;

							-- StarterGui.EraGui.MainWindow.Background.ContentHolder.AnimationHolder.ScrollingFrame.Category.InactiveToggle.toggle.ToggleMain
							Toggle["5f"] = Instance.new("Frame", Toggle["5e"]);
							Toggle["5f"]["BorderSizePixel"] = 0;
							Toggle["5f"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
							Toggle["5f"]["Size"] = UDim2.new(1, 0, 1, 0);
							Toggle["5f"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
							Toggle["5f"]["Name"] = [[ToggleMain]];
							Toggle["5f"]["BackgroundTransparency"] = 0.92;

							-- StarterGui.EraGui.MainWindow.Background.ContentHolder.AnimationHolder.ScrollingFrame.Category.InactiveToggle.toggle.ToggleMain.UICorner
							Toggle["60"] = Instance.new("UICorner", Toggle["5f"]);
							Toggle["60"]["CornerRadius"] = UDim.new(0, 20);

							-- StarterGui.EraGui.MainWindow.Background.ContentHolder.AnimationHolder.ScrollingFrame.Category.InactiveToggle.toggle.ToggleMain.UIStroke
							Toggle["61"] = Instance.new("UIStroke", Toggle["5f"]);
							Toggle["61"]["Transparency"] = 0.5;
							Toggle["61"]["Color"] = Color3.fromRGB(79, 82, 87);

							-- StarterGui.EraGui.MainWindow.Background.ContentHolder.AnimationHolder.ScrollingFrame.Category.InactiveToggle.toggle.ToggleMain.EnabledBackground
							Toggle["62"] = Instance.new("Frame", Toggle["5f"]);
							Toggle["62"]["BorderSizePixel"] = 0;
							Toggle["62"]["BackgroundColor3"] = MenuManager.SelectedTheme.SecondElements;
							Toggle["62"]["Size"] = UDim2.new(1, 0, 1, 0);
							Toggle["62"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
							Toggle["62"]["Name"] = [[EnabledBackground]];
							Toggle["62"]["BackgroundTransparency"] = 1;

							-- StarterGui.EraGui.MainWindow.Background.ContentHolder.AnimationHolder.ScrollingFrame.Category.InactiveToggle.toggle.ToggleMain.EnabledBackground.UICorner
							Toggle["63"] = Instance.new("UICorner", Toggle["62"]);
							Toggle["63"]["CornerRadius"] = UDim.new(0, 20);

							-- StarterGui.EraGui.MainWindow.Background.ContentHolder.AnimationHolder.ScrollingFrame.Category.InactiveToggle.toggle.ToggleMain.Knob
							Toggle["64"] = Instance.new("ImageLabel", Toggle["5f"]);
							Toggle["64"]["ZIndex"] = 2;
							Toggle["64"]["ImageTransparency"] = 0.3;
							Toggle["64"]["AnchorPoint"] = Vector2.new(0, 0.5);
							Toggle["64"]["Image"] = [[rbxasset://textures/ui/ImageSet/InGameMenu/img_set_1x_1.png]];
							Toggle["64"]["ImageRectSize"] = Vector2.new(42, 42);
							Toggle["64"]["Size"] = UDim2.new(0, 21, 0, 21);
							Toggle["64"]["BorderColor3"] = Color3.fromRGB(28, 43, 54);
							Toggle["64"]["BackgroundTransparency"] = 1;
							Toggle["64"]["ImageRectOffset"] = Vector2.new(0, 208);
							Toggle["64"]["Name"] = [[Knob]];
							Toggle["64"]["Position"] = UDim2.new(1, -34, 0.5, 0);
						end

						--///METHODS
						do
							function Toggle:Toggle(b)
								if b == nil then
									Toggle.State = not Toggle.State
								else
									Toggle.State = b
								end
								Toggle["5v"].Value = Toggle.State
								if Toggle.State then
									tweenService:Create(Toggle["64"], TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut), {Position = UDim2.new(1, -19, 0.5, 0)}):Play()
									tweenService:Create(Toggle["64"], TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut), {ImageColor3 = MenuManager.SelectedTheme.ToggleKnob}):Play()
									tweenService:Create(Toggle["64"], TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut), {ImageTransparency = 0}):Play()
									tweenService:Create(Toggle["62"], TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut), {BackgroundTransparency = 0}):Play()
								else
									tweenService:Create(Toggle["64"], TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut), {Position = UDim2.new(1, -34, 0.5, 0)}):Play()
									tweenService:Create(Toggle["64"], TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut), {ImageColor3 = Color3.fromRGB(230, 230, 230)}):Play()
									tweenService:Create(Toggle["64"], TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut), {ImageTransparency = 0.3}):Play()
									tweenService:Create(Toggle["62"], TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut), {BackgroundTransparency = 1}):Play()
								end

								local Success, Response = pcall(function()
									options.Callback(Toggle.State)
								end)
								if not Success then
									MenuManager:ReportErrors(Response, options.Title)
								end

								return
							end
						end

						--///LOGIC
						do
							Toggle["5c"].MouseEnter:Connect(function()
								Toggle.Hover = true
							end)
							Toggle["5c"].MouseLeave:Connect(function()
								Toggle.Hover = false
							end)

							uis.InputBegan:Connect(function(input, gpe)
								if gpe then return end

								if input.UserInputType == Enum.UserInputType.MouseButton1 then
									if Toggle.Hover then
										Toggle:Toggle()
									end
								end
							end)
						end

						MenuManager.Options[options.Title] = Toggle
						Toggle:Toggle(options.Enabled)
						return Toggle
					end

					--/// SLIDER
					function Category:CreateSlider(options)
						options = EraGui:validate({
							Title = "Slider";
							MinValue = 1;
							MaxValue = 10;
							Default = 5;
							Increment = 1;
							Callback = function(v) end;
						}, options or {})

						local Slider = {
							MouseDown = false,	
							Hover = false,
							Connection = nil,
							Type = "Slider";
							Value = options.Default;
							Name = options.Title;
						}

						MenuManager.Options[options.Title] = nil

						--//DRAWING
						do
							-- StarterGui.EraGui.MainWindow.Background.ContentHolder.AnimationHolder.ScrollingFrame.Category.Slider
							Slider["65"] = Instance.new("Frame", Category["33"]);
							Slider["65"]["BorderSizePixel"] = 0;
							Slider["65"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
							Slider["65"]["Size"] = UDim2.new(1, 0, 0, 40);
							Slider["65"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
							Slider["65"]["Name"] = [[Slider]];
							Slider["65"]["BackgroundTransparency"] = 1;


							-- StarterGui.EraGui.MainWindow.Background.ContentHolder.AnimationHolder.ScrollingFrame.Category.Slider.SliderBar
							Slider["66"] = Instance.new("Frame", Slider["65"]);
							Slider["66"]["BorderSizePixel"] = 0;
							Slider["66"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
							Slider["66"]["AnchorPoint"] = Vector2.new(0, 0.5);
							Slider["66"]["Size"] = UDim2.new(1, -10, 0, 3);
							Slider["66"]["Position"] = UDim2.new(0, 10, 0.8, 0);
							Slider["66"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
							Slider["66"]["Name"] = [[SliderBar]];
							Slider["66"]["BackgroundTransparency"] = 0.92;


							-- StarterGui.EraGui.MainWindow.Background.ContentHolder.AnimationHolder.ScrollingFrame.Category.Slider.SliderBar.UICorner
							Slider["67"] = Instance.new("UICorner", Slider["66"]);
							Slider["67"]["CornerRadius"] = UDim.new(0, 25);


							-- StarterGui.EraGui.MainWindow.Background.ContentHolder.AnimationHolder.ScrollingFrame.Category.Slider.SliderBar.FilledBar
							Slider["68"] = Instance.new("Frame", Slider["66"]);
							Slider["68"]["BorderSizePixel"] = 0;
							Slider["68"]["BackgroundColor3"] = MenuManager.SelectedTheme.SecondElements;
							Slider["68"]["Size"] = UDim2.new(0.7, 0, 1, 0);
							Slider["68"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
							Slider["68"]["Name"] = [[FilledBar]];


							-- StarterGui.EraGui.MainWindow.Background.ContentHolder.AnimationHolder.ScrollingFrame.Category.Slider.SliderBar.FilledBar.UICorner
							Slider["69"] = Instance.new("UICorner", Slider["68"]);
							Slider["69"]["CornerRadius"] = UDim.new(0, 10);


							-- StarterGui.EraGui.MainWindow.Background.ContentHolder.AnimationHolder.ScrollingFrame.Category.Slider.SliderBar.FilledBar.Knob
							Slider["6a"] = Instance.new("ImageLabel", Slider["68"]);
							Slider["6a"]["ZIndex"] = 2;
							Slider["6a"]["AnchorPoint"] = Vector2.new(1, 0.5);
							Slider["6a"]["Image"] = [[rbxasset://textures/ui/ImageSet/InGameMenu/img_set_1x_1.png]];
							Slider["6a"]["ImageColor3"] = Color3.fromRGB(240,240,240)
							Slider["6a"]["ImageRectSize"] = Vector2.new(42, 42);
							Slider["6a"]["Size"] = UDim2.new(0, 21, 0, 21);
							Slider["6a"]["BorderColor3"] = Color3.fromRGB(28, 43, 54);
							Slider["6a"]["BackgroundTransparency"] = 1;
							Slider["6a"]["ImageRectOffset"] = Vector2.new(0, 208);
							Slider["6a"]["Name"] = [[Knob]];
							Slider["6a"]["Position"] = UDim2.new(1, 5, 0.5, 0);
							Slider["6a"]["ImageTransparency"] = 0;


							-- StarterGui.EraGui.MainWindow.Background.ContentHolder.AnimationHolder.ScrollingFrame.Category.Slider.TextHolder
							Slider["6b"] = Instance.new("Frame", Slider["65"]);
							Slider["6b"]["BorderSizePixel"] = 0;
							Slider["6b"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
							Slider["6b"]["Size"] = UDim2.new(1, -10, 0, 15);
							Slider["6b"]["Position"] = UDim2.new(0, 10, 0, 5);
							Slider["6b"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
							Slider["6b"]["Name"] = [[TextHolder]];
							Slider["6b"]["BackgroundTransparency"] = 1;


							-- StarterGui.EraGui.MainWindow.Background.ContentHolder.AnimationHolder.ScrollingFrame.Category.Slider.TextHolder.Title
							Slider["6c"] = Instance.new("TextLabel", Slider["6b"]);
							Slider["6c"]["TextWrapped"] = true;
							Slider["6c"]["BorderSizePixel"] = 0;
							Slider["6c"]["TextXAlignment"] = Enum.TextXAlignment.Left;
							Slider["6c"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
							Slider["6c"]["TextSize"] = 15;
							Slider["6c"]["FontFace"] = Font.new([[rbxassetid://12187365364]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
							Slider["6c"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
							Slider["6c"]["BackgroundTransparency"] = 1;
							Slider["6c"]["Size"] = UDim2.new(1, -45, 1, 0);
							Slider["6c"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
							Slider["6c"]["Text"] = options.Title;
							Slider["6c"]["Name"] = [[Title]];


							-- StarterGui.EraGui.MainWindow.Background.ContentHolder.AnimationHolder.ScrollingFrame.Category.Slider.TextHolder.Value
							Slider["6d"] = Instance.new("TextLabel", Slider["6b"]);
							Slider["6d"]["TextWrapped"] = true;
							Slider["6d"]["BorderSizePixel"] = 0;
							Slider["6d"]["TextXAlignment"] = Enum.TextXAlignment.Right;
							Slider["6d"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
							Slider["6d"]["TextSize"] = 15;
							Slider["6d"]["FontFace"] = Font.new([[rbxassetid://12187365364]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
							Slider["6d"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
							Slider["6d"]["BackgroundTransparency"] = 1;
							Slider["6d"]["AnchorPoint"] = Vector2.new(1, 0);
							Slider["6d"]["Size"] = UDim2.new(0, 0, 1, 0);
							Slider["6d"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
							Slider["6d"]["Text"] = [[1.000]];
							Slider["6d"]["AutomaticSize"] = Enum.AutomaticSize.X;
							Slider["6d"]["Name"] = [[Value]];
							Slider["6d"]["Position"] = UDim2.new(1, 0, 0, 0);
						end

						--///METHODS
						do
							function Slider:GetValue()
								return tonumber(Slider["6d"].Text)
							end

							function Slider:SetValue(v)

								if v == nil then
									local percentage = math.clamp((mouse.X - Slider["66"].AbsolutePosition.X) / Slider["66"].AbsoluteSize.X, 0, 1)
									local value = (options.MaxValue - options.MinValue) * percentage + options.MinValue

									local NewValue = math.round(value / options.Increment) * options.Increment
									local EndValue = math.round(NewValue * 10) / 10

									tweenService:Create(Slider["68"], TweenInfo.new(0.12, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut), {Size = UDim2.new(percentage, 0, 1, 0)}):Play()

									if EndValue ~= Slider:GetValue() then
										Slider["6d"].Text = EndValue
	
										local Success, Response = pcall(function()
											options.Callback(Slider:GetValue())
										end)
										if not Success then
											MenuManager:ReportErrors(Response, options.Title)
										end
									end
								else
									Slider["6d"].Text = tostring(v)
									local percentage = (v - options.MinValue) / (options.MaxValue - options.MinValue)
									tweenService:Create(Slider["68"], TweenInfo.new(0.12, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut), {Size = UDim2.new(percentage, 0, 1, 0)}):Play()

									local Success, Response = pcall(function()
										options.Callback(Slider:GetValue())
									end)
									if not Success then
										MenuManager:ReportErrors(Response, options.Title)
									end
								end
								Slider.Value = Slider:GetValue()
							end
						end

						--///LOGIC

						Slider["6a"].MouseEnter:Connect(function()
							Slider.Hover = true
						end)

						Slider["6a"].MouseLeave:Connect(function()
							Slider.Hover = false
						end)

						uis.InputBegan:Connect(function(input, gpe)
							if gpe then return end

							if input.UserInputType == Enum.UserInputType.MouseButton1 and Slider.Hover then
								Slider.MouseDown = true
								tweenService:Create(Slider["6a"], TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut), {ImageColor3 = Color3.fromRGB(255,255,255)}):Play()

								if not Slider.Connection then 
									Slider.Connection = runService.RenderStepped:Connect(function()
										Slider:SetValue()
									end)
								end
							end
						end)

						uis.InputEnded:Connect(function(input, gpe)
							if gpe then return end

							if input.UserInputType == Enum.UserInputType.MouseButton1 then
								Slider.MouseDown = false
								tweenService:Create(Slider["6a"], TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut), {ImageColor3 = Color3.fromRGB(240,240,240)}):Play()

								if Slider.Connection then Slider.Connection:Disconnect() end
								Slider.Connection = nil
							end
						end)

						MenuManager.Options[options.Title] = Slider
						Slider:SetValue(options.Default)
						return Slider
					end

					--/// INPUT BOX
					function Category:CreateInputBox(options)
						options = EraGui:validate({
							Title = "Input Box",
							Text = "",
							PlaceHolderText = "Input your text here :D",
							Callback = function(text) end,
						}, options or {})

						MenuManager.Options[options.Title] = nil
						
						local InputBox = {
							Type = "InputBox";
							Text = options.Text;
							Name = options.Title;
						}
						
						--/// RENDER
						do
							-- StarterGui.DisplayEraGui.MainWindow.Background.ContentHolder.AnimationHolder.ScrollingFrame.Category.ScreenGui.InputBox
							InputBox["2"] = Instance.new("Frame", Category["33"]);
							InputBox["2"]["BorderSizePixel"] = 0;
							InputBox["2"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
							InputBox["2"]["Size"] = UDim2.new(1, 0, 0, 50);
							InputBox["2"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
							InputBox["2"]["Name"] = [[InputBox]];
							InputBox["2"]["BackgroundTransparency"] = 1;


							-- StarterGui.DisplayEraGui.MainWindow.Background.ContentHolder.AnimationHolder.ScrollingFrame.Category.ScreenGui.InputBox.InputBoxHolder
							InputBox["3"] = Instance.new("Frame", InputBox["2"]);
							InputBox["3"]["BorderSizePixel"] = 0;
							InputBox["3"]["BackgroundColor3"] = MenuManager.SelectedTheme.ElementMain;
							InputBox["3"]["Size"] = UDim2.new(1, -10, 0, 25);
							InputBox["3"]["Position"] = UDim2.new(0, 8, 0, 20);
							InputBox["3"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
							InputBox["3"]["Name"] = [[InputBoxHolder]];
							InputBox["3"]["BackgroundTransparency"] = MenuManager.SelectedTheme.ElementTransparency;


							-- StarterGui.DisplayEraGui.MainWindow.Background.ContentHolder.AnimationHolder.ScrollingFrame.Category.ScreenGui.InputBox.InputBoxHolder.TextBox
							InputBox["4"] = Instance.new("TextBox", InputBox["3"]);
							InputBox["4"]["CursorPosition"] = -1;
							InputBox["4"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
							InputBox["4"]["BorderSizePixel"] = 0;
							InputBox["4"]["TextXAlignment"] = Enum.TextXAlignment.Left;
							InputBox["4"]["TextSize"] = 14;
							InputBox["4"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
							InputBox["4"]["FontFace"] = Font.new([[rbxassetid://12187365364]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
							InputBox["4"]["ClearTextOnFocus"] = false;
							InputBox["4"]["PlaceholderText"] = options.PlaceHolderText;
							InputBox["4"]["Size"] = UDim2.new(1, -5, 1, 0);
							InputBox["4"]["Position"] = UDim2.new(0, 5, 0, 0);
							InputBox["4"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
							InputBox["4"]["Text"] = [[]];
							InputBox["4"]["BackgroundTransparency"] = 1;
							InputBox["4"]["ClipsDescendants"] = true;

							-- StarterGui.DisplayEraGui.MainWindow.Background.ContentHolder.AnimationHolder.ScrollingFrame.Category.ScreenGui.InputBox.InputBoxHolder.Line
							InputBox["5"] = Instance.new("Frame", InputBox["3"]);
							InputBox["5"]["BorderSizePixel"] = 0;
							InputBox["5"]["BackgroundColor3"] = MenuManager.SelectedTheme.Lines;
							InputBox["5"]["Size"] = UDim2.new(1, 0, 0, 1);
							InputBox["5"]["Position"] = UDim2.new(0, 0, 1, 3);
							InputBox["5"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
							InputBox["5"]["Name"] = [[Line]];

							InputBox["6r"] = Instance.new("UIStroke", InputBox["3"]);
							InputBox["6r"]["Color"] = MenuManager.SelectedTheme.ElementBorder;
							InputBox["6r"]["Transparency"] = 0.5;

							-- StarterGui.DisplayEraGui.MainWindow.Background.ContentHolder.AnimationHolder.ScrollingFrame.Category.ScreenGui.InputBox.InputBoxHolder.Line.UICorner
							InputBox["6"] = Instance.new("UICorner", InputBox["5"]);
							InputBox["6"]["CornerRadius"] = UDim.new(0, 25);


							-- StarterGui.DisplayEraGui.MainWindow.Background.ContentHolder.AnimationHolder.ScrollingFrame.Category.ScreenGui.InputBox.InputBoxHolder.Line.FilledLine
							InputBox["7"] = Instance.new("Frame", InputBox["5"]);
							InputBox["7"]["BorderSizePixel"] = 0;
							InputBox["7"]["BackgroundColor3"] = MenuManager.SelectedTheme.SecondElements;
							InputBox["7"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
							InputBox["7"]["Size"] = UDim2.new(0, 0, 1, 0);
							InputBox["7"]["Position"] = UDim2.new(0.5, 0, 0.5, 0);
							InputBox["7"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
							InputBox["7"]["Name"] = [[FilledLine]];
							InputBox["7"]["ZIndex"] = 4;

							-- StarterGui.DisplayEraGui.MainWindow.Background.ContentHolder.AnimationHolder.ScrollingFrame.Category.ScreenGui.InputBox.InputBoxHolder.Line.FilledLine.UICorner
							InputBox["8"] = Instance.new("UICorner", InputBox["7"]);
							InputBox["8"]["CornerRadius"] = UDim.new(0, 25);


							-- StarterGui.DisplayEraGui.MainWindow.Background.ContentHolder.AnimationHolder.ScrollingFrame.Category.ScreenGui.InputBox.InputBoxHolder.UICorner
							InputBox["9"] = Instance.new("UICorner", InputBox["3"]);
							InputBox["9"]["CornerRadius"] = UDim.new(0, 6);


							-- StarterGui.DisplayEraGui.MainWindow.Background.ContentHolder.AnimationHolder.ScrollingFrame.Category.ScreenGui.InputBox.Title
							InputBox["a"] = Instance.new("TextLabel", InputBox["2"]);
							InputBox["a"]["TextWrapped"] = true;
							InputBox["a"]["BorderSizePixel"] = 0;
							InputBox["a"]["TextXAlignment"] = Enum.TextXAlignment.Left;
							InputBox["a"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
							InputBox["a"]["TextSize"] = 15;
							InputBox["a"]["FontFace"] = Font.new([[rbxassetid://12187365364]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
							InputBox["a"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
							InputBox["a"]["BackgroundTransparency"] = 1;
							InputBox["a"]["Size"] = UDim2.new(1, 0, 0, 15);
							InputBox["a"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
							InputBox["a"]["Text"] = options.Title;
							InputBox["a"]["Name"] = [[Title]];
							InputBox["a"]["Position"] = UDim2.new(0, 10, 0, 0);
						end
						
						--/// METHODS
						do
							function InputBox:SetText(text)
								InputBox.Text = text
								InputBox["4"].Text = text
								options.Callback(InputBox["4"].Text)
							end
						end
						
						--/// LOGIC
						do
							InputBox["4"].Focused:Connect(function()
								task.spawn(function()
									tweenService:Create(InputBox["6r"],  TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut), {Color = Color3.fromRGB(200,200,200)}):Play()
									tweenService:Create(InputBox["7"],  TweenInfo.new(0.4, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut), {Size = UDim2.new(1,0,1,0)}):Play()
								end)
							end)
							
							InputBox["4"].FocusLost:Connect(function()
								task.spawn(function()
									tweenService:Create(InputBox["6r"],  TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut), {Color = MenuManager.SelectedTheme.ElementBorder}):Play()
									tweenService:Create(InputBox["7"],  TweenInfo.new(0.4, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut), {Size = UDim2.new(0,0,1,0)}):Play()
								end)
								InputBox:SetText(InputBox["4"].Text)
							end)
						end
						
						MenuManager.Options[options.Title] = InputBox
						InputBox:SetText(options.Text)
						return InputBox
					end

					--// DROPDOWN
					function Category:CreateDropdown(options)
						options = EraGui:validate({
							Title = "Dropdown",
							Items = {""},
							Selected = {""},
							MultiSelection = false,
							Callback = function(item) end
						}, options or {})

						MenuManager.Options[options.Title] = nil

						local Dropdown = {
							Type = "Dropdown";
							Name = options.Title;

							Hover = false;
							OptionsHover = false;
							Open = false;
							Items = {
								Selected = {}
							};
						}

						--/// DRAWING DROPDOWN
						do
							-- StarterGui.EraGui.MainWindow.Background.ContentHolder.AnimationHolder.ScrollingFrame.Category.OpenedDropdown
							Dropdown["3f"] = Instance.new("Frame", Category["33"]);
							Dropdown["3f"]["ZIndex"] = 5;
							Dropdown["3f"]["BorderSizePixel"] = 0;
							Dropdown["3f"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
							Dropdown["3f"]["Size"] = UDim2.new(1, 0, 0, 30);
							Dropdown["3f"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
							Dropdown["3f"]["Name"] = [[OpenedDropdown]];
							Dropdown["3f"]["BackgroundTransparency"] = 1;

							-- StarterGui.EraGui.MainWindow.Background.ContentHolder.AnimationHolder.ScrollingFrame.Category.OpenedDropdown.Title
							Dropdown["40"] = Instance.new("TextLabel", Dropdown["3f"]);
							Dropdown["40"]["TextWrapped"] = true;
							Dropdown["40"]["BorderSizePixel"] = 0;
							Dropdown["40"]["TextXAlignment"] = Enum.TextXAlignment.Left;
							Dropdown["40"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
							Dropdown["40"]["TextSize"] = 15;
							Dropdown["40"]["FontFace"] = Font.new([[rbxassetid://12187365364]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
							Dropdown["40"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
							Dropdown["40"]["BackgroundTransparency"] = 1;
							Dropdown["40"]["AnchorPoint"] = Vector2.new(0, 0.5);
							Dropdown["40"]["Size"] = UDim2.new(1, -120, 1, 0);
							Dropdown["40"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
							Dropdown["40"]["Text"] = options.Title;
							Dropdown["40"]["Name"] = [[Title]];
							Dropdown["40"]["Position"] = UDim2.new(0, 10, 0.5, 0);

							-- StarterGui.EraGui.MainWindow.Background.ContentHolder.AnimationHolder.ScrollingFrame.Category.OpenedDropdown.dropdown
							Dropdown["41"] = Instance.new("Frame", Dropdown["3f"]);
							Dropdown["41"]["BorderSizePixel"] = 0;
							Dropdown["41"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
							Dropdown["41"]["AnchorPoint"] = Vector2.new(1, 0.5);
							Dropdown["41"]["Size"] = UDim2.new(0, 110, 0, 25);
							Dropdown["41"]["Position"] = UDim2.new(1, 0, 0.5, 0);
							Dropdown["41"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
							Dropdown["41"]["Name"] = [[dropdown]];
							Dropdown["41"]["BackgroundTransparency"] = MenuManager.SelectedTheme.ElementTransparency;
							Dropdown["41"]["ZIndex"] = 5;

							Dropdown["41r"] = Instance.new("UIStroke", Dropdown["41"])
							Dropdown["41r"]["Transparency"] = 0.5;
							Dropdown["41r"]["Color"] = MenuManager.SelectedTheme.ElementBorder;

							-- StarterGui.EraGui.MainWindow.Background.ContentHolder.AnimationHolder.ScrollingFrame.Category.OpenedDropdown.dropdown.UICorner
							Dropdown["42"] = Instance.new("UICorner", Dropdown["41"]);
							Dropdown["42"]["CornerRadius"] = UDim.new(0, 6);

							-- StarterGui.EraGui.MainWindow.Background.ContentHolder.AnimationHolder.ScrollingFrame.Category.OpenedDropdown.dropdown.SelectText
							Dropdown["43"] = Instance.new("TextLabel", Dropdown["41"]);
							Dropdown["43"]["TextWrapped"] = true;
							Dropdown["43"]["BorderSizePixel"] = 0;
							Dropdown["43"]["TextXAlignment"] = Enum.TextXAlignment.Left;
							Dropdown["43"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
							Dropdown["43"]["TextSize"] = 14;
							Dropdown["43"]["FontFace"] = Font.new([[rbxassetid://12187365364]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
							Dropdown["43"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
							Dropdown["43"]["BackgroundTransparency"] = 1;
							Dropdown["43"]["AnchorPoint"] = Vector2.new(0, 0.5);
							Dropdown["43"]["Size"] = UDim2.new(1, -25, 1, 0);
							Dropdown["43"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
							Dropdown["43"]["Text"] = [[Select]];
							Dropdown["43"]["Name"] = [[SelectText]];
							Dropdown["43"]["Position"] = UDim2.new(0, 5, 0.5, 0);

							-- StarterGui.EraGui.MainWindow.Background.ContentHolder.AnimationHolder.ScrollingFrame.Category.OpenedDropdown.dropdown.ArrowIcon
							Dropdown["44"] = Instance.new("ImageLabel", Dropdown["41"]);
							Dropdown["44"]["BorderSizePixel"] = 0;
							Dropdown["44"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
							Dropdown["44"]["AnchorPoint"] = Vector2.new(1, 0.5);
							Dropdown["44"]["Image"] = [[rbxassetid://16884178261]];
							Dropdown["44"]["ImageRectSize"] = Vector2.new(16, 16);
							Dropdown["44"]["Size"] = UDim2.new(0, 14, 0, 14);
							Dropdown["44"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
							Dropdown["44"]["BackgroundTransparency"] = 1;
							Dropdown["44"]["ImageRectOffset"] = Vector2.new(208, 494);
							Dropdown["44"]["Name"] = [[ArrowIcon]];
							Dropdown["44"]["Position"] = UDim2.new(1, -4, 0.5, 0);

							-- StarterGui.EraGui.MainWindow.Background.ContentHolder.AnimationHolder.ScrollingFrame.Category.OpenedDropdown.dropdown.OptionsHolder
							Dropdown["45"] = Instance.new("Frame", MenuManager["9r"]);
							Dropdown["45"]["Visible"] = false;
							Dropdown["45"]["BorderSizePixel"] = 0;
							Dropdown["45"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
							Dropdown["45"]["Size"] = UDim2.new(0, 110, 0, 100);
							Dropdown["45"]["Position"] = UDim2.new(0, 0, 0, 30);
							Dropdown["45"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
							Dropdown["45"]["Name"] = [[OptionsHolder]];
							Dropdown["45"]["BackgroundTransparency"] = 1;

							-- StarterGui.EraGui.MainWindow.Background.ContentHolder.AnimationHolder.ScrollingFrame.Category.OpenedDropdown.dropdown.OptionsHolder.AnimHolder
							Dropdown["46"] = Instance.new("CanvasGroup", Dropdown["45"]);
							Dropdown["46"]["ZIndex"] = 2;
							Dropdown["46"]["BorderSizePixel"] = 0;
							Dropdown["46"]["BackgroundColor3"] = Color3.fromRGB(36, 36, 36);
							Dropdown["46"]["ClipsDescendants"] = true;
							Dropdown["46"]["Size"] = UDim2.new(1, 0, 0, 90);
							Dropdown["46"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
							Dropdown["46"]["Position"] = UDim2.new(0,0,0,7)
							Dropdown["46"]["Name"] = [[AnimHolder]];
							Dropdown["46"]["BackgroundTransparency"] = 1;
							Dropdown["46"]["GroupTransparency"] = 1;

							-- StarterGui.EraGui.MainWindow.Background.ContentHolder.AnimationHolder.ScrollingFrame.Category.OpenedDropdown.dropdown.OptionsHolder.AnimHolder.UICorner
							Dropdown["47"] = Instance.new("UICorner", Dropdown["46"]);

							-- StarterGui.EraGui.MainWindow.Background.ContentHolder.AnimationHolder.ScrollingFrame.Category.OpenedDropdown.dropdown.OptionsHolder.AnimHolder.optionsHolder
							Dropdown["48"] = Instance.new("ScrollingFrame", Dropdown["46"]);
							Dropdown["48"]["ZIndex"] = 0;
							Dropdown["48"]["BorderSizePixel"] = 0;
							Dropdown["48"]["CanvasSize"] = UDim2.new(0, 0, 0, 0);
							Dropdown["48"]["BackgroundColor3"] = MenuManager.SelectedTheme.DropdownMain;
							Dropdown["48"]["Name"] = [[optionsHolder]];
							Dropdown["48"]["ScrollBarImageTransparency"] = 0.1;
							Dropdown["48"]["AutomaticCanvasSize"] = Enum.AutomaticSize.Y;
							Dropdown["48"]["Size"] = UDim2.new(1, 0, 1, 0);
							Dropdown["48"]["ScrollBarImageColor3"] = Color3.fromRGB(121, 121, 121);
							Dropdown["48"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
							Dropdown["48"]["ScrollBarThickness"] = 0;
							Dropdown["48"]["BackgroundTransparency"] = MenuManager.SelectedTheme.DropdownTransparency;

							-- StarterGui.EraGui.MainWindow.Background.ContentHolder.AnimationHolder.ScrollingFrame.Category.OpenedDropdown.dropdown.OptionsHolder.AnimHolder.optionsHolder.UIListLayout
							Dropdown["4c"] = Instance.new("UIListLayout", Dropdown["48"]);
							Dropdown["4c"]["HorizontalAlignment"] = Enum.HorizontalAlignment.Center;
							Dropdown["4c"]["SortOrder"] = Enum.SortOrder.LayoutOrder;
							Dropdown["4c"]["ItemLineAlignment"] = Enum.ItemLineAlignment.Center;
						end

						--///METHODS
						do
							function Dropdown:Toggle()
								Dropdown.Open = not Dropdown.Open

								if Dropdown.Open then

									local OptionsCount = 0
									for i, v in pairs(Dropdown.Items) do
										if v ~= nil  then
											OptionsCount += 1
										end
									end
									local SizeOptionHolder = (OptionsCount - 1) * 30 + 10 + 5

									if SizeOptionHolder > 220 then SizeOptionHolder = 220 end

									Dropdown["45"]["Size"] = UDim2.new(0, 110, 0, SizeOptionHolder)
									Dropdown["46"]["Size"] = UDim2.new(0, 110, 0, SizeOptionHolder - 10)

									Dropdown["45"].Position = UDim2.new(0, Dropdown["41"].AbsolutePosition.X - Dropdown["45"].AbsolutePosition.X, 0, Dropdown["41"].AbsolutePosition.Y - Dropdown["45"].AbsolutePosition.Y +60)
									Tab["30"].Interactable = false
									Dropdown["45"]["Visible"] = true
									tweenService:Create(Dropdown["46"], TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut), {GroupTransparency = 0}):Play()
									tweenService:Create(Dropdown["46"], TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut), {Position = UDim2.new(0,0,0,0)}):Play()
								else
									tweenService:Create(Dropdown["46"], TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut), {GroupTransparency = 1}):Play()
									tweenService:Create(Dropdown["46"], TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut), {Position = UDim2.new(0,0,0,7)}):Play()
									wait(0.2)
									Dropdown["45"]["Visible"] = false
									Tab["30"].Interactable = true
									Dropdown["45"].Position = UDim2.new(0,0,0,30)
								end
							end

							local function UpdateText()

								if #Dropdown.Items.Selected > 1 then
									local OBJ = {}
									for _, v in pairs(Dropdown.Items.Selected) do
										OBJ[#OBJ+1] = v
									end
									Dropdown["43"].Text = table.concat(OBJ, ", ")
								elseif Dropdown.Items.Selected[1] then
									Dropdown["43"].Text = Dropdown.Items[Dropdown.Items.Selected[1]].Options["49"].Name
								else
									Dropdown["43"].Text = "Select"
								end
							end

							--///CREATING OPTIONS AND MAIN MECHANICS HERE
							function Dropdown:Add(Option, Selected)

								Dropdown.Items[Option] = {
									Selected = Selected,
									Options = {
										Hover = false,
									},
								}

								--///RENDER
								do
									-- StarterGui.EraGui.MainWindow.Background.ContentHolder.AnimationHolder.ScrollingFrame.Category.OpenedDropdown.dropdown.OptionsHolder.AnimHolder.optionsHolder.InactiveOption
									Dropdown.Items[Option].Options["49"] = Instance.new("Frame", Dropdown["48"]);
									Dropdown.Items[Option].Options["49"]["BorderSizePixel"] = 0;
									Dropdown.Items[Option].Options["49"]["BackgroundColor3"] = Color3.fromRGB(121, 121, 121);
									Dropdown.Items[Option].Options["49"]["ClipsDescendants"] = true;
									Dropdown.Items[Option].Options["49"]["Size"] = UDim2.new(1, 0, 0, 30);
									Dropdown.Items[Option].Options["49"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
									Dropdown.Items[Option].Options["49"]["Name"] = Option;
									Dropdown.Items[Option].Options["49"]["BackgroundTransparency"] = 1;


									-- StarterGui.EraGui.MainWindow.Background.ContentHolder.AnimationHolder.ScrollingFrame.Category.OpenedDropdown.dropdown.OptionsHolder.AnimHolder.optionsHolder.InactiveOption.Title
									Dropdown.Items[Option].Options["4a"] = Instance.new("TextLabel", Dropdown.Items[Option].Options["49"]);
									Dropdown.Items[Option].Options["4a"]["TextWrapped"] = true;
									Dropdown.Items[Option].Options["4a"]["BorderSizePixel"] = 0;
									Dropdown.Items[Option].Options["4a"]["TextXAlignment"] = Enum.TextXAlignment.Left;
									Dropdown.Items[Option].Options["4a"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
									Dropdown.Items[Option].Options["4a"]["TextSize"] = 14;
									Dropdown.Items[Option].Options["4a"]["FontFace"] = Font.new([[rbxassetid://12187365364]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
									Dropdown.Items[Option].Options["4a"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
									Dropdown.Items[Option].Options["4a"]["BackgroundTransparency"] = 1;
									Dropdown.Items[Option].Options["4a"]["AnchorPoint"] = Vector2.new(0, 0.5);
									Dropdown.Items[Option].Options["4a"]["Size"] = UDim2.new(1, -10, 1, 0);
									Dropdown.Items[Option].Options["4a"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
									Dropdown.Items[Option].Options["4a"]["Text"] = Option;
									Dropdown.Items[Option].Options["4a"]["Name"] = [[Title]];
									Dropdown.Items[Option].Options["4a"]["Position"] = UDim2.new(0, 5, 0.5, 0);
								end

								local localItems = Dropdown.Items[Option].Options

								localItems["49"].MouseEnter:Connect(function()
									localItems.Hover = true
								end)
								localItems["49"].MouseLeave:Connect(function()
									localItems.Hover = false
								end)



								uis.InputBegan:Connect(function(input, gpe)
									if gpe then return end

									if input.UserInputType == Enum.UserInputType.MouseButton1 then
										if localItems.Hover then

											if not Dropdown.Items[Option] then
												Dropdown.Items[Option] = {
													Selected = false,
													Options = {
														Hover = false,
													},
												}
											end

											if not Dropdown.Items[Option].Selected then
												table.insert(Dropdown.Items.Selected, Option)
												if not options.MultiSelection then
													--///GETTING ALL SELECTEDS OPTIONS
													for i,v in pairs(Dropdown["48"]:GetChildren()) do
														if v:IsA("Frame") then
															if Dropdown.Items[v.Name].Selected then
																Dropdown.Items[v.Name].Selected = false
																table.remove(Dropdown.Items.Selected, table.find(Dropdown.Items.Selected, v.Name))
																EraGui:SetTransparency(Dropdown.Items[v.Name].Options["49"], 1)
															end
														end
													end

													EraGui:SetTransparency(localItems["49"], 0.83)

													local Success, Response = pcall(function()
														options.Callback(localItems["49"].Name) end) if not Success then MenuManager:ReportErrors(Response, options.Title) end
												else
													EraGui:SetTransparency(localItems["49"], 0.83)
													local Success, Response = pcall(function()
														options.Callback(Dropdown.Items.Selected) end) if not Success then MenuManager:ReportErrors(Response, options.Title) end
												end

												Dropdown.Items[Option].Selected = true
												UpdateText()
											else
												EraGui:SetTransparency(localItems["49"], 1)
												Dropdown.Items[Option].Selected = false

												table.remove(Dropdown.Items.Selected, table.find(Dropdown.Items.Selected, Option))

												if options.MultiSelection then
													local Success, Response = pcall(function()
														options.Callback(Dropdown.Items.Selected) end) if not Success then MenuManager:ReportErrors(Response, options.Title) end
												end

												UpdateText()
											end
										end
									end
								end)

								if Selected then
									EraGui:SetTransparency(localItems["49"], 0.83)

									table.insert(Dropdown.Items.Selected, Option)
									if not options.MultiSelection then
										local Success, Response = pcall(function()
											options.Callback(localItems["49"].Name) end) if not Success then MenuManager:ReportErrors(Response, options.Title) end
									else
										local Success, Response = pcall(function()
											options.Callback(Dropdown.Items.Selected) end) if not Success then MenuManager:ReportErrors(Response, options.Title) end
									end
									UpdateText()
								end

							end

							function Dropdown:AddOptions(Options, Selecteds)
								if typeof(Options) == "table" then
									local addedOptions = {}

									for _, Opt in pairs(Options) do
										if not addedOptions[Opt] then
											local isSelected = false
											for _, Sel in pairs(Selecteds) do
												if Sel == Opt then
													isSelected = true
													break
												end
											end

											Dropdown:Add(Opt, isSelected)
											addedOptions[Opt] = true
										end
									end
								end
							end

							function Dropdown:Refresh(Options, Selecteds)
								if Dropdown.Open then
									Dropdown:Toggle()
								end

								Dropdown.Items.Selected = {}
								Dropdown.Items = {Selected = {}}

								for _, option in ipairs(Dropdown["48"]:GetChildren()) do
									if option.ClassName == "Frame" then
										option:Destroy()
									end
								end

								Dropdown:AddOptions(Options, Selecteds)
							end

							function Dropdown:UpdateOptionProperty(opt, selected)
								local object = Dropdown.Items[opt].Options

								if not object then
									return
								end

								Dropdown.Items[opt].Selected = selected

								if selected then
									if not options.MultiSelection then
										local Success, Response = pcall(function()
											options.Callback(object["49"].Name) end) if not Success then MenuManager:ReportErrors(Response, options.Title) end
									else
										local Success, Response = pcall(function()
											options.Callback(Dropdown.Items.Selected) end) if not Success then MenuManager:ReportErrors(Response, options.Title) end
									end

									table.insert(Dropdown.Items.Selected, opt)

									EraGui:SetTransparency(object["49"], 0.83)
								else
									if options.MultiSelection then
										local Success, Response = pcall(function()
											options.Callback(Dropdown.Items.Selected) end) if not Success then MenuManager:ReportErrors(Response, options.Title) end
									end

									table.remove(Dropdown.Items.Selected, table.find(Dropdown.Items.Selected, opt))
									
									EraGui:SetTransparency(object["49"], 1)
								end

								UpdateText()
							end

							function Dropdown:SetValues(values)

								for i, idx in pairs(Dropdown.Items) do
									Dropdown:UpdateOptionProperty(i, false)
									
									for _, valu in pairs(values) do
										if i == valu then
											Dropdown:UpdateOptionProperty(i, true)
										end
									end
								end
							end

							function Dropdown:GetAllSelectedElements()
								local SelectedsList = {}

								for i, v in pairs(Dropdown.Items) do
									if v.Selected then
										table.insert(SelectedsList, tostring(i))
									end
								end

								return SelectedsList
							end

							function Dropdown:GetElements()
								local ElementsList = {}
								
								for i, v in pairs(Dropdown.Items) do
									table.insert(ElementsList, i)
								end

								return ElementsList
							end
						end

						--///LOGIC
						do
							Dropdown["3f"].MouseEnter:Connect(function()
								Dropdown.Hover = true
							end)

							Dropdown["3f"].MouseLeave:Connect(function()
								Dropdown.Hover = false
							end)
							Dropdown["48"].MouseEnter:Connect(function()
								Dropdown.OptionsHover = true
							end)

							Dropdown["48"].MouseLeave:Connect(function()
								Dropdown.OptionsHover = false
							end)

							uis.InputBegan:Connect(function(input, gpe)
								if gpe then return end

								if input.UserInputType == Enum.UserInputType.MouseButton1 then
									if Dropdown.Hover then
										Dropdown:Toggle()
										EraGui:SetTransparency(Dropdown["41"], 0.90)
									elseif Dropdown.Open and not Dropdown.OptionsHover then
										Dropdown:Toggle()
									end

								end
							end)
							uis.InputEnded:Connect(function(input, gpe)
								if gpe then return end

								if input.UserInputType == Enum.UserInputType.MouseButton1 then
									EraGui:SetTransparency(Dropdown["41"], MenuManager.SelectedTheme.ElementTransparency)
								end
							end)


							Dropdown:AddOptions(options.Items, options.Selected)
						end

						MenuManager.Options[options.Title] = Dropdown
						return Dropdown
					end

					--/// BIND TOGGLE
					function Category:CreateBindToggle(options)
						options = EraGui:validate({
							Title = "Toggle",
							BindButton = "",
							Enabled = false,
							Callback = function(bool) end,
						}, options or {})

						MenuManager.Options[options.Title] = nil	

						local BindToggle = {
							State = options.Enabled;
							Hover = false;

							BindHover = false;
							WaitingAbutton = false;
							HasBind = false;
							BindButton = "";

							Name = options.Title;
							Type = "BindToggle";
						}

						--/// DRAWING
						do
							-- StarterGui.EraGui.MainWindow.Background.ContentHolder.AnimationHolder.ScrollingFrame.Category.BindToggle
							BindToggle["87"] = Instance.new("Frame", Category["33"]);
							BindToggle["87"]["ZIndex"] = 4;
							BindToggle["87"]["BorderSizePixel"] = 0;
							BindToggle["87"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
							BindToggle["87"]["Size"] = UDim2.new(1, 0, 0, 30);
							BindToggle["87"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
							BindToggle["87"]["Name"] = [[BindToggle]];
							BindToggle["87"]["BackgroundTransparency"] = 1;

							-- StarterGui.EraGui.MainWindow.Background.ContentHolder.AnimationHolder.ScrollingFrame.Category.BindToggle.Title
							BindToggle["88"] = Instance.new("TextLabel", BindToggle["87"]);
							BindToggle["88"]["TextWrapped"] = true;
							BindToggle["88"]["BorderSizePixel"] = 0;
							BindToggle["88"]["TextXAlignment"] = Enum.TextXAlignment.Left;
							BindToggle["88"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
							BindToggle["88"]["TextSize"] = 15;
							BindToggle["88"]["FontFace"] = Font.new([[rbxassetid://12187365364]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
							BindToggle["88"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
							BindToggle["88"]["BackgroundTransparency"] = 1;
							BindToggle["88"]["Size"] = UDim2.new(1, -120, 1, 0);
							BindToggle["88"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
							BindToggle["88"]["Text"] = options.Title;
							BindToggle["88"]["Name"] = [[Title]];
							BindToggle["88"]["Position"] = UDim2.new(0, 10, 0, 0);

							BindToggle["8l"] = Instance.new("Frame", BindToggle["87"])
							BindToggle["8l"]["BackgroundTransparency"] = 1
							BindToggle["8l"]["Position"] = UDim2.new(1,0,0,0)
							BindToggle["8l"]["AnchorPoint"] = Vector2.new(1,0)
							BindToggle["8l"]["Name"] = "Optionsholder";
							BindToggle["8l"]["Size"] = UDim2.new(0, 115, 1, 0)

							BindToggle["5v"] = Instance.new("BoolValue", BindToggle["8l"])
							BindToggle["5v"]["Value"] = false

							-- StarterGui.EraGui.MainWindow.Background.ContentHolder.AnimationHolder.ScrollingFrame.Category.BindToggle.toggle
							BindToggle["89"] = Instance.new("Frame", BindToggle["8l"]);
							BindToggle["89"]["BorderSizePixel"] = 0;
							BindToggle["89"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
							BindToggle["89"]["AnchorPoint"] = Vector2.new(1, 0.5);
							BindToggle["89"]["Size"] = UDim2.new(0, 32, 0, 17);
							BindToggle["89"]["Position"] = UDim2.new(0, 35, 0, 15);
							BindToggle["89"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
							BindToggle["89"]["Name"] = [[toggle]];
							BindToggle["89"]["BackgroundTransparency"] = 1;


							-- StarterGui.EraGui.MainWindow.Background.ContentHolder.AnimationHolder.ScrollingFrame.Category.BindToggle.toggle.ToggleMain
							BindToggle["8a"] = Instance.new("Frame", BindToggle["89"]);
							BindToggle["8a"]["BorderSizePixel"] = 0;
							BindToggle["8a"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
							BindToggle["8a"]["Size"] = UDim2.new(1, 0, 1, 0);
							BindToggle["8a"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
							BindToggle["8a"]["Name"] = [[ToggleMain]];
							BindToggle["8a"]["BackgroundTransparency"] = 0.92;


							-- StarterGui.EraGui.MainWindow.Background.ContentHolder.AnimationHolder.ScrollingFrame.Category.BindToggle.toggle.ToggleMain.UICorner
							BindToggle["8b"] = Instance.new("UICorner", BindToggle["8a"]);
							BindToggle["8b"]["CornerRadius"] = UDim.new(0, 20);


							-- StarterGui.EraGui.MainWindow.Background.ContentHolder.AnimationHolder.ScrollingFrame.Category.BindToggle.toggle.ToggleMain.UIStroke
							BindToggle["8c"] = Instance.new("UIStroke", BindToggle["8a"]);
							BindToggle["8c"]["Transparency"] = 0.5;
							BindToggle["8c"]["Color"] = Color3.fromRGB(79, 82, 87);


							-- StarterGui.EraGui.MainWindow.Background.ContentHolder.AnimationHolder.ScrollingFrame.Category.BindToggle.toggle.ToggleMain.EnabledBackground
							BindToggle["8d"] = Instance.new("Frame", BindToggle["8a"]);
							BindToggle["8d"]["BorderSizePixel"] = 0;
							BindToggle["8d"]["BackgroundColor3"] = MenuManager.SelectedTheme.SecondElements;
							BindToggle["8d"]["Size"] = UDim2.new(1, 0, 1, 0);
							BindToggle["8d"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
							BindToggle["8d"]["Name"] = [[EnabledBackground]];
							BindToggle["8d"]["BackgroundTransparency"] = 1;


							-- StarterGui.EraGui.MainWindow.Background.ContentHolder.AnimationHolder.ScrollingFrame.Category.BindToggle.toggle.ToggleMain.EnabledBackground.UICorner
							BindToggle["8e"] = Instance.new("UICorner", BindToggle["8d"]);
							BindToggle["8e"]["CornerRadius"] = UDim.new(0, 20);


							-- StarterGui.EraGui.MainWindow.Background.ContentHolder.AnimationHolder.ScrollingFrame.Category.BindToggle.toggle.ToggleMain.Knob
							BindToggle["8f"] = Instance.new("ImageLabel", BindToggle["8a"]);
							BindToggle["8f"]["ZIndex"] = 2;
							BindToggle["8f"]["ImageTransparency"] = 0.3;
							BindToggle["8f"]["AnchorPoint"] = Vector2.new(0, 0.5);
							BindToggle["8f"]["Image"] = [[rbxasset://textures/ui/ImageSet/InGameMenu/img_set_1x_1.png]];
							BindToggle["8f"]["ImageRectSize"] = Vector2.new(42, 42);
							BindToggle["8f"]["Size"] = UDim2.new(0, 21, 0, 21);
							BindToggle["8f"]["BorderColor3"] = Color3.fromRGB(28, 43, 54);
							BindToggle["8f"]["BackgroundTransparency"] = 1;
							BindToggle["8f"]["ImageRectOffset"] = Vector2.new(0, 208);
							BindToggle["8f"]["Name"] = [[Knob]];
							BindToggle["8f"]["Position"] = UDim2.new(1, -34, 0.5, 0);


							-- StarterGui.EraGui.MainWindow.Background.ContentHolder.AnimationHolder.ScrollingFrame.Category.BindToggle.BindFrame
							BindToggle["90"] = Instance.new("Frame", BindToggle["8l"]);
							BindToggle["90"]["BorderSizePixel"] = 0;
							BindToggle["90"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
							BindToggle["90"]["AnchorPoint"] = Vector2.new(1, 0.5);
							BindToggle["90"]["Size"] = UDim2.new(0, 73, 0, 21);
							BindToggle["90"]["Position"] = UDim2.new(1, 0, 0, 15);
							BindToggle["90"]["AnchorPoint"] = Vector2.new(1, 0.5)
							BindToggle["90"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
							BindToggle["90"]["Name"] = [[BindFrame]];
							BindToggle["90"]["BackgroundTransparency"] = 0.92;


							-- StarterGui.EraGui.MainWindow.Background.ContentHolder.AnimationHolder.ScrollingFrame.Category.BindToggle.BindFrame.UICorner
							BindToggle["91"] = Instance.new("UICorner", BindToggle["90"]);
							BindToggle["91"]["CornerRadius"] = UDim.new(0, 7);


							-- StarterGui.EraGui.MainWindow.Background.ContentHolder.AnimationHolder.ScrollingFrame.Category.BindToggle.BindFrame.UIStroke
							BindToggle["92"] = Instance.new("UIStroke", BindToggle["90"]);
							BindToggle["92"]["Transparency"] = 0.5;
							BindToggle["92"]["Color"] = Color3.fromRGB(79, 82, 87);


							-- StarterGui.EraGui.MainWindow.Background.ContentHolder.AnimationHolder.ScrollingFrame.Category.BindToggle.BindFrame.Bind
							BindToggle["93"] = Instance.new("TextLabel", BindToggle["90"]);
							BindToggle["93"]["BorderSizePixel"] = 0;
							BindToggle["93"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
							BindToggle["93"]["TextSize"] = 14;
							BindToggle["93"]["FontFace"] = Font.new([[rbxassetid://12187365364]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
							BindToggle["93"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
							BindToggle["93"]["BackgroundTransparency"] = 1;
							BindToggle["93"]["Size"] = UDim2.new(1, 0, 1, 0);
							BindToggle["93"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
							BindToggle["93"]["AnchorPoint"] = Vector2.new(0.5, 0);
							BindToggle["93"]["Position"] = UDim2.new(0.5,0,0,0)
							BindToggle["93"]["Text"] = [[Left Control]];
							BindToggle["93"]["Name"] = [[Bind]];


							-- StarterGui.EraGui.MainWindow.Background.ContentHolder.AnimationHolder.ScrollingFrame.Category.BindToggle.BindFrame.Bind.UICorner
							BindToggle["94"] = Instance.new("UICorner", BindToggle["93"]);
							BindToggle["94"]["CornerRadius"] = UDim.new(0, 7);
						end

						--/// METHODS
						local function SetBindText(text)
							BindToggle["93"].Text = tostring(text)
							tweenService:Create(BindToggle["90"], TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut), {Size = UDim2.new(0, BindToggle["93"].TextBounds.X + 13,0,21)}):Play()
							tweenService:Create(BindToggle["8l"], TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut), {Size = UDim2.new(0, BindToggle["93"].TextBounds.X + 56, 0, 21)}):Play()
						end

						do
							function BindToggle:Toggle(b)
								if b == nil then
									BindToggle.State = not BindToggle.State
								else
									BindToggle.State = b
								end
								BindToggle["5v"].Value = BindToggle.State
								if BindToggle.State then
									tweenService:Create(BindToggle["8f"], TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut), {Position = UDim2.new(1, -19, 0.5, 0)}):Play()
									tweenService:Create(BindToggle["8f"], TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut), {ImageColor3 = MenuManager.SelectedTheme.ToggleKnob}):Play()
									tweenService:Create(BindToggle["8f"], TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut), {ImageTransparency = 0}):Play()
									tweenService:Create(BindToggle["8d"], TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut), {BackgroundTransparency = 0}):Play()
								else
									tweenService:Create(BindToggle["8f"], TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut), {Position = UDim2.new(1, -34, 0.5, 0)}):Play()
									tweenService:Create(BindToggle["8f"], TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut), {ImageColor3 = Color3.fromRGB(230, 230, 230)}):Play()
									tweenService:Create(BindToggle["8f"], TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut), {ImageTransparency = 0.3}):Play()
									tweenService:Create(BindToggle["8d"], TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut), {BackgroundTransparency = 1}):Play()
								end
								local Success, Response = pcall(function()
									options.Callback(BindToggle.State)
								end)
								if not Success then
									MenuManager:ReportErrors(Response, options.Title)
								end
							end

							function BindToggle:SetBind(bind)
								BindToggle.BindButton = bind
								if bind == "" then
									SetBindText("None")
								else
									SetBindText(bind)
								end
							end

							function BindToggle:GetBind()
								return BindToggle.BindButton
							end
						end

						--/// LOGIC
						do
							BindToggle["89"].MouseEnter:Connect(function()
								BindToggle.Hover = true
							end)
							BindToggle["89"].MouseLeave:Connect(function()
								BindToggle.Hover = false
							end)

							BindToggle["93"].MouseEnter:Connect(function()
								BindToggle.BindHover = true
							end)
							BindToggle["93"].MouseLeave:Connect(function()
								BindToggle.BindHover = false
							end)

							uis.InputBegan:Connect(function(input, gpe)
								if gpe then return end

								if input.UserInputType == Enum.UserInputType.MouseButton1 then
									if BindToggle.Hover then
										BindToggle:Toggle()
									end
									if BindToggle.BindHover then
										BindToggle.WaitingAbutton = true
										SetBindText("...")
										return
									end
								end

								if BindToggle.WaitingAbutton then

									if input.UserInputType == Enum.UserInputType.MouseButton1 then
										BindToggle.WaitingAbutton = false
										BindToggle.BindButton = ""
										SetBindText("None")
										return
									end

									SetBindText(input.KeyCode.Name)			
									BindToggle.BindButton = input.KeyCode.Name
									BindToggle.WaitingAbutton = false
									return
								end

								if input.KeyCode.Name == BindToggle.BindButton then
									BindToggle:Toggle()
								end

							end)
						end

						BindToggle:SetBind(options.BindButton)
						BindToggle:Toggle(options.Enabled)
						MenuManager.Options[options.Title] = BindToggle
						return BindToggle
					end

					--/// COLOR PICKER TOGGLE
					function Category:CreateColorPickerToggle(options)
						options = EraGui:validate({
							Title = "Color Picker Toggle",
							TransparencyBar = true,
							TransparencyValue = 0;
							Color = Color3.fromRGB(11,220,120),
							Enabled = false,
							Callback = function(bool, color, transparent) end,
						}, options or {})

						MenuManager.Options[options.Title] = nil

						local ColorPickerToggle = {
							Type = "ColorPickerToggle",
							Name = options.Title,
							Hover = false,
							ShowerHover = false,
							PickerHover = false,
							State = false,

							GradientSliderHover = false,
							TransparentSliderHover = false,
							transparentSliderDragging = false,
							MainCpHover = false,
							mainDragging = false,
							sliderDragging = false,

							ColorPickerOpen = false,
							Transparency = options.TransparencyValue,
							Color = options.Color,
						}

						--/// RENDER
						do
							-- StarterGui.EraGui.MainWindow.Background.ContentHolder.AnimationHolder.ScrollingFrame.Category.ColorPickerToggle
							ColorPickerToggle["7a"] = Instance.new("Frame", Category["33"]);
							ColorPickerToggle["7a"]["ZIndex"] = 4;
							ColorPickerToggle["7a"]["BorderSizePixel"] = 0;
							ColorPickerToggle["7a"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
							ColorPickerToggle["7a"]["Size"] = UDim2.new(1, 0, 0, 30);
							ColorPickerToggle["7a"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
							ColorPickerToggle["7a"]["Name"] = [[ColorPickerToggle]];
							ColorPickerToggle["7a"]["BackgroundTransparency"] = 1;

							ColorPickerToggle["5v"] = Instance.new("BoolValue", ColorPickerToggle["7a"])
							ColorPickerToggle["5v"]["Value"] = false

							-- StarterGui.EraGui.MainWindow.Background.ContentHolder.AnimationHolder.ScrollingFrame.Category.ColorPickerToggle.Title
							ColorPickerToggle["7b"] = Instance.new("TextLabel", ColorPickerToggle["7a"]);
							ColorPickerToggle["7b"]["TextWrapped"] = true;
							ColorPickerToggle["7b"]["BorderSizePixel"] = 0;
							ColorPickerToggle["7b"]["TextXAlignment"] = Enum.TextXAlignment.Left;
							ColorPickerToggle["7b"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
							ColorPickerToggle["7b"]["TextSize"] = 15;
							ColorPickerToggle["7b"]["FontFace"] = Font.new([[rbxassetid://12187365364]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
							ColorPickerToggle["7b"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
							ColorPickerToggle["7b"]["BackgroundTransparency"] = 1;
							ColorPickerToggle["7b"]["Size"] = UDim2.new(1, -70, 1, 0);
							ColorPickerToggle["7b"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
							ColorPickerToggle["7b"]["Text"] = options.Title;
							ColorPickerToggle["7b"]["Name"] = [[Title]];
							ColorPickerToggle["7b"]["Position"] = UDim2.new(0, 10, 0, 0);

							-- StarterGui.EraGui.MainWindow.Background.ContentHolder.AnimationHolder.ScrollingFrame.Category.ColorPickerToggle.toggle
							ColorPickerToggle["7c"] = Instance.new("Frame", ColorPickerToggle["7a"]);
							ColorPickerToggle["7c"]["BorderSizePixel"] = 0;
							ColorPickerToggle["7c"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
							ColorPickerToggle["7c"]["AnchorPoint"] = Vector2.new(1, 0.5);
							ColorPickerToggle["7c"]["Size"] = UDim2.new(0, 32, 0, 17);
							ColorPickerToggle["7c"]["Position"] = UDim2.new(1, -30, 0.5, 0);
							ColorPickerToggle["7c"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
							ColorPickerToggle["7c"]["Name"] = [[toggle]];
							ColorPickerToggle["7c"]["BackgroundTransparency"] = 1;

							-- StarterGui.EraGui.MainWindow.Background.ContentHolder.AnimationHolder.ScrollingFrame.Category.ColorPickerToggle.toggle.ToggleMain
							ColorPickerToggle["7d"] = Instance.new("Frame", ColorPickerToggle["7c"]);
							ColorPickerToggle["7d"]["BorderSizePixel"] = 0;
							ColorPickerToggle["7d"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
							ColorPickerToggle["7d"]["Size"] = UDim2.new(1, 0, 1, 0);
							ColorPickerToggle["7d"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
							ColorPickerToggle["7d"]["Name"] = [[ToggleMain]];
							ColorPickerToggle["7d"]["BackgroundTransparency"] = 0.92;

							-- StarterGui.EraGui.MainWindow.Background.ContentHolder.AnimationHolder.ScrollingFrame.Category.ColorPickerToggle.toggle.ToggleMain.UICorner
							ColorPickerToggle["7e"] = Instance.new("UICorner", ColorPickerToggle["7d"]);
							ColorPickerToggle["7e"]["CornerRadius"] = UDim.new(0, 20);

							-- StarterGui.EraGui.MainWindow.Background.ContentHolder.AnimationHolder.ScrollingFrame.Category.ColorPickerToggle.toggle.ToggleMain.UIStroke
							ColorPickerToggle["7f"] = Instance.new("UIStroke", ColorPickerToggle["7d"]);
							ColorPickerToggle["7f"]["Transparency"] = 0.5;
							ColorPickerToggle["7f"]["Color"] = Color3.fromRGB(79, 82, 87);

							-- StarterGui.EraGui.MainWindow.Background.ContentHolder.AnimationHolder.ScrollingFrame.Category.ColorPickerToggle.toggle.ToggleMain.EnabledBackground
							ColorPickerToggle["80"] = Instance.new("Frame", ColorPickerToggle["7d"]);
							ColorPickerToggle["80"]["BorderSizePixel"] = 0;
							ColorPickerToggle["80"]["BackgroundColor3"] = MenuManager.SelectedTheme.SecondElements;
							ColorPickerToggle["80"]["Size"] = UDim2.new(1, 0, 1, 0);
							ColorPickerToggle["80"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
							ColorPickerToggle["80"]["Name"] = [[EnabledBackground]];
							ColorPickerToggle["80"]["BackgroundTransparency"] = 1;

							-- StarterGui.EraGui.MainWindow.Background.ContentHolder.AnimationHolder.ScrollingFrame.Category.ColorPickerToggle.toggle.ToggleMain.EnabledBackground.UICorner
							ColorPickerToggle["81"] = Instance.new("UICorner", ColorPickerToggle["80"]);
							ColorPickerToggle["81"]["CornerRadius"] = UDim.new(0, 20);

							-- StarterGui.EraGui.MainWindow.Background.ContentHolder.AnimationHolder.ScrollingFrame.Category.ColorPickerToggle.toggle.ToggleMain.Knob
							ColorPickerToggle["82"] = Instance.new("ImageLabel", ColorPickerToggle["7d"]);
							ColorPickerToggle["82"]["ZIndex"] = 2;
							ColorPickerToggle["82"]["ImageTransparency"] = 0.3;
							ColorPickerToggle["82"]["AnchorPoint"] = Vector2.new(0, 0.5);
							ColorPickerToggle["82"]["Image"] = [[rbxasset://textures/ui/ImageSet/InGameMenu/img_set_1x_1.png]];
							ColorPickerToggle["82"]["ImageRectSize"] = Vector2.new(42, 42);
							ColorPickerToggle["82"]["Size"] = UDim2.new(0, 21, 0, 21);
							ColorPickerToggle["82"]["BorderColor3"] = Color3.fromRGB(28, 43, 54);
							ColorPickerToggle["82"]["BackgroundTransparency"] = 1;
							ColorPickerToggle["82"]["ImageRectOffset"] = Vector2.new(0, 208);
							ColorPickerToggle["82"]["Name"] = [[Knob]];
							ColorPickerToggle["82"]["Position"] = UDim2.new(1, -34, 0.5, 0);

							-- StarterGui.EraGui.MainWindow.Background.ContentHolder.AnimationHolder.ScrollingFrame.Category.ColorPickerToggle.ColorPickerShow
							ColorPickerToggle["83"] = Instance.new("ImageLabel", ColorPickerToggle["7a"]);
							ColorPickerToggle["83"]["BorderSizePixel"] = 0;
							ColorPickerToggle["83"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
							ColorPickerToggle["83"]["AnchorPoint"] = Vector2.new(1, 0.5);
							ColorPickerToggle["83"]["Image"] = [[rbxassetid://75936605349812]];
							ColorPickerToggle["83"]["Size"] = UDim2.new(0, 21, 0, 21);
							ColorPickerToggle["83"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
							ColorPickerToggle["83"]["BackgroundTransparency"] = 1;
							ColorPickerToggle["83"]["Name"] = [[ColorPickerShow]];
							ColorPickerToggle["83"]["Position"] = UDim2.new(1, 0, 0.5, 0);

							-- StarterGui.EraGui.MainWindow.Background.ContentHolder.AnimationHolder.ScrollingFrame.Category.ColorPickerToggle.ColorPickerShow.ColorShow
							ColorPickerToggle["84"] = Instance.new("Frame", ColorPickerToggle["83"]);
							ColorPickerToggle["84"]["BorderSizePixel"] = 0;
							ColorPickerToggle["84"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
							ColorPickerToggle["84"]["Size"] = UDim2.new(1, 0, 1, 0);
							ColorPickerToggle["84"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
							ColorPickerToggle["84"]["Name"] = [[ColorShow]];

							-- StarterGui.EraGui.MainWindow.Background.ContentHolder.AnimationHolder.ScrollingFrame.Category.ColorPickerToggle.ColorPickerShow.ColorShow.UICorner
							ColorPickerToggle["85"] = Instance.new("UICorner", ColorPickerToggle["84"]);
							ColorPickerToggle["85"]["CornerRadius"] = UDim.new(0, 6);

							-- StarterGui.EraGui.MainWindow.Background.ContentHolder.AnimationHolder.ScrollingFrame.Category.ColorPickerToggle.ColorPickerShow.UICorner
							ColorPickerToggle["86"] = Instance.new("UICorner", ColorPickerToggle["83"]);
							ColorPickerToggle["86"]["CornerRadius"] = UDim.new(0, 7);
						end

						--/// COLOR PICKER RENDER
						do
							ColorPickerToggle["9fr"] = Instance.new("CanvasGroup", MenuManager["9d"])
							ColorPickerToggle["9fr"]["Visible"] = false;
							ColorPickerToggle["9fr"]["ZIndex"] = 5;
							ColorPickerToggle["9fr"]["GroupTransparency"] = 1
							ColorPickerToggle["9fr"]["BackgroundTransparency"] = 1
							ColorPickerToggle["9fr"]["BorderSizePixel"] = 0;
							ColorPickerToggle["9fr"]["BackgroundColor3"] = Color3.fromRGB(36, 36, 36);
							ColorPickerToggle["9fr"]["Size"] = UDim2.new(0, 155, 0, 185);
							ColorPickerToggle["9fr"]["Position"] = UDim2.new(0, 0, 0, 0);
							ColorPickerToggle["9fr"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);

							-- StarterGui.EraGui.MainWindow.Background.ColorPickers.ColorPickerTransparent
							ColorPickerToggle["9e"] = Instance.new("Frame", ColorPickerToggle["9fr"]);
							ColorPickerToggle["9e"]["Visible"] = true;
							ColorPickerToggle["9e"]["ZIndex"] = 5;
							ColorPickerToggle["9e"]["BorderSizePixel"] = 0;
							ColorPickerToggle["9e"]["BackgroundColor3"] = Color3.fromRGB(36, 36, 36);
							ColorPickerToggle["9e"]["Size"] = UDim2.new(1, 0, 0, 175);
							ColorPickerToggle["9e"]["Position"] = UDim2.new(0, 0, 0, 7);
							ColorPickerToggle["9e"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
							ColorPickerToggle["9e"]["Name"] = [[ColorPickerTransparent]];

							-- StarterGui.EraGui.MainWindow.Background.ColorPickers.ColorPickerTransparent.UICorner
							ColorPickerToggle["9f"] = Instance.new("UICorner", ColorPickerToggle["9e"]);

							-- StarterGui.EraGui.MainWindow.Background.ColorPickers.ColorPickerTransparent.BackgroundCP
							ColorPickerToggle["a0"] = Instance.new("Frame", ColorPickerToggle["9e"]);
							ColorPickerToggle["a0"]["BorderSizePixel"] = 0;
							ColorPickerToggle["a0"]["BackgroundTransparency"] = 0;
							ColorPickerToggle["a0"]["BackgroundColor3"] = Color3.fromRGB(99, 255, 0);
							ColorPickerToggle["a0"]["AnchorPoint"] = Vector2.new(0.5, 0);
							ColorPickerToggle["a0"]["Size"] = UDim2.new(0, 140, 0, 130);
							ColorPickerToggle["a0"]["Position"] = UDim2.new(0.5, 0, 0, 7);
							ColorPickerToggle["a0"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
							ColorPickerToggle["a0"]["Name"] = [[BackgroundCP]];

							-- StarterGui.EraGui.MainWindow.Background.ColorPickers.ColorPickerTransparent.BackgroundCP.UICorner
							ColorPickerToggle["a1"] = Instance.new("UICorner", ColorPickerToggle["a0"]);

							-- StarterGui.EraGui.MainWindow.Background.ColorPickers.ColorPickerTransparent.BackgroundCP.UIStroke
							ColorPickerToggle["a2"] = Instance.new("UIStroke", ColorPickerToggle["a0"]);
							ColorPickerToggle["a2"]["Transparency"] = 0.5;
							ColorPickerToggle["a2"]["ApplyStrokeMode"] = Enum.ApplyStrokeMode.Border;
							ColorPickerToggle["a2"]["Thickness"] = 2;

							-- StarterGui.EraGui.MainWindow.Background.ColorPickers.ColorPickerTransparent.BackgroundCP.MainCP
							ColorPickerToggle["a3"] = Instance.new("ImageLabel", ColorPickerToggle["a0"]);
							ColorPickerToggle["a3"]["BorderSizePixel"] = 0;
							ColorPickerToggle["a3"]["ImageTransparency"] = 0;
							ColorPickerToggle["a3"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
							ColorPickerToggle["a3"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
							ColorPickerToggle["a3"]["Image"] = [[http://www.roblox.com/asset/?id=11415645739]];
							ColorPickerToggle["a3"]["Size"] = UDim2.new(1, 0, 1, 0);
							ColorPickerToggle["a3"]["BackgroundTransparency"] = 1;
							ColorPickerToggle["a3"]["Name"] = [[MainCP]];
							ColorPickerToggle["a3"]["BorderColor3"] = Color3.fromRGB(28, 43, 54);
							ColorPickerToggle["a3"]["Position"] = UDim2.new(0.5, 0, 0.5, 0);
							ColorPickerToggle["a3"]["ZIndex"] = 2;

							-- StarterGui.EraGui.MainWindow.Background.ColorPickers.ColorPickerTransparent.BackgroundCP.MainCP.UICorner
							ColorPickerToggle["a4"] = Instance.new("UICorner", ColorPickerToggle["a3"]);
							ColorPickerToggle["a4"]["CornerRadius"] = UDim.new(0, 5);

							-- StarterGui.EraGui.MainWindow.Background.ColorPickers.ColorPickerTransparent.BackgroundCP.MainCP.MainPoint
							ColorPickerToggle["a5"] = Instance.new("ImageLabel", ColorPickerToggle["a3"]);
							ColorPickerToggle["a5"]["BorderSizePixel"] = 0;
							ColorPickerToggle["a5"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
							ColorPickerToggle["a5"]["Image"] = [[http://www.roblox.com/asset/?id=77998759001817]];
							ColorPickerToggle["a5"]["Size"] = UDim2.new(0, 14, 0, 14);
							ColorPickerToggle["a5"]["BackgroundTransparency"] = 1;
							ColorPickerToggle["a5"]["Name"] = [[MainPoint]];
							ColorPickerToggle["a5"]["BorderColor3"] = Color3.fromRGB(28, 43, 54);
							ColorPickerToggle["a5"]["Position"] = UDim2.new(0.45, 0, 0.4, 0);

							-- StarterGui.EraGui.MainWindow.Background.ColorPickers.ColorPickerTransparent.BackgroundCP.Display
							ColorPickerToggle["a6"] = Instance.new("Frame", ColorPickerToggle["a0"]);
							ColorPickerToggle["a6"]["Interactable"] = false;
							ColorPickerToggle["a6"]["BorderSizePixel"] = 0;
							ColorPickerToggle["a6"]["BackgroundTransparency"] = 1;
							ColorPickerToggle["a6"]["BackgroundColor3"] = Color3.fromRGB(99, 255, 0);
							ColorPickerToggle["a6"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
							ColorPickerToggle["a6"]["Size"] = UDim2.new(1, 0, 1, 0);
							ColorPickerToggle["a6"]["Position"] = UDim2.new(0.5, 0, 0.5, 0);
							ColorPickerToggle["a6"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
							ColorPickerToggle["a6"]["Name"] = [[Display]];

							-- StarterGui.EraGui.MainWindow.Background.ColorPickers.ColorPickerTransparent.BackgroundCP.Display.UICorner
							ColorPickerToggle["a7"] = Instance.new("UICorner", ColorPickerToggle["a6"]);

							-- StarterGui.EraGui.MainWindow.Background.ColorPickers.ColorPickerTransparent.BackgroundCP.Display.Frame
							ColorPickerToggle["a8"] = Instance.new("Frame", ColorPickerToggle["a6"]);
							ColorPickerToggle["a8"]["Interactable"] = false;
							ColorPickerToggle["a8"]["BorderSizePixel"] = 0;
							ColorPickerToggle["a8"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
							ColorPickerToggle["a8"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
							ColorPickerToggle["a8"]["Size"] = UDim2.new(1, 0, 1, 0);
							ColorPickerToggle["a8"]["Position"] = UDim2.new(0.5, 0, 0.5, 0);
							ColorPickerToggle["a8"]["BorderColor3"] = Color3.fromRGB(28, 43, 54);
							ColorPickerToggle["a8"]["BackgroundTransparency"] = 0.75;


							-- StarterGui.EraGui.MainWindow.Background.ColorPickers.ColorPickerTransparent.BackgroundCP.Display.Frame.UICorner
							ColorPickerToggle["a9"] = Instance.new("UICorner", ColorPickerToggle["a8"]);
							ColorPickerToggle["a9"]["CornerRadius"] = UDim.new(0, 6);

							-- StarterGui.EraGui.MainWindow.Background.ColorPickers.ColorPickerTransparent.SliderHolder
							ColorPickerToggle["aa"] = Instance.new("Frame", ColorPickerToggle["9e"]);
							ColorPickerToggle["aa"]["BorderSizePixel"] = 0;
							ColorPickerToggle["aa"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
							ColorPickerToggle["aa"]["AnchorPoint"] = Vector2.new(0.5, 1);
							ColorPickerToggle["aa"]["Size"] = UDim2.new(0, 150, 0, 30);
							ColorPickerToggle["aa"]["Position"] = UDim2.new(0.5, 0, 1, 0);
							ColorPickerToggle["aa"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
							ColorPickerToggle["aa"]["Name"] = [[SliderHolder]];
							ColorPickerToggle["aa"]["BackgroundTransparency"] = 1;

							-- StarterGui.EraGui.MainWindow.Background.ColorPickers.ColorPickerTransparent.SliderHolder.GradientScrollBar
							ColorPickerToggle["ab"] = Instance.new("ImageLabel", ColorPickerToggle["aa"]);
							ColorPickerToggle["ab"]["BorderSizePixel"] = 0;
							ColorPickerToggle["ab"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
							ColorPickerToggle["ab"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
							ColorPickerToggle["ab"]["Size"] = UDim2.new(1, 0, 0, 4);
							ColorPickerToggle["ab"]["Position"] = UDim2.new(0.5, 0, 0, 0);
							ColorPickerToggle["ab"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
							ColorPickerToggle["ab"]["Name"] = [[GradientScrollBar]];

							-- StarterGui.EraGui.MainWindow.Background.ColorPickers.ColorPickerTransparent.SliderHolder.GradientScrollBar.UICorner
							ColorPickerToggle["ac"] = Instance.new("UICorner", ColorPickerToggle["ab"]);
							ColorPickerToggle["ac"]["CornerRadius"] = UDim.new(0, 20);

							-- StarterGui.EraGui.MainWindow.Background.ColorPickers.ColorPickerTransparent.SliderHolder.GradientScrollBar.Knob
							ColorPickerToggle["ad"] = Instance.new("ImageLabel", ColorPickerToggle["ab"]);
							ColorPickerToggle["ad"]["ImageColor3"] = Color3.fromRGB(246, 246, 246);
							ColorPickerToggle["ad"]["ZIndex"] = 2;
							ColorPickerToggle["ad"]["AnchorPoint"] = Vector2.new(0, 0.5);
							ColorPickerToggle["ad"]["Image"] = [[http://www.roblox.com/asset/?id=101717031440345]];
							ColorPickerToggle["ad"]["Size"] = UDim2.new(0, 13, 0, 13);
							ColorPickerToggle["ad"]["BackgroundTransparency"] = 1;
							ColorPickerToggle["ad"]["Name"] = [[Knob]];
							ColorPickerToggle["ad"]["BorderColor3"] = Color3.fromRGB(28, 43, 54);
							ColorPickerToggle["ad"]["Position"] = UDim2.new(0, 25, 0.5, 0);

							-- StarterGui.EraGui.MainWindow.Background.ColorPickers.ColorPickerTransparent.SliderHolder.GradientScrollBar.UIGradient
							ColorPickerToggle["ae"] = Instance.new("UIGradient", ColorPickerToggle["ab"]);
							ColorPickerToggle["ae"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(255, 0, 0)),ColorSequenceKeypoint.new(0.056, Color3.fromRGB(255, 86, 0)),ColorSequenceKeypoint.new(0.111, Color3.fromRGB(255, 171, 0)),ColorSequenceKeypoint.new(0.167, Color3.fromRGB(255, 255, 0)),ColorSequenceKeypoint.new(0.223, Color3.fromRGB(170, 255, 0)),ColorSequenceKeypoint.new(0.279, Color3.fromRGB(84, 255, 0)),ColorSequenceKeypoint.new(0.334, Color3.fromRGB(0, 255, 2)),ColorSequenceKeypoint.new(0.390, Color3.fromRGB(0, 255, 87)),ColorSequenceKeypoint.new(0.446, Color3.fromRGB(0, 255, 172)),ColorSequenceKeypoint.new(0.501, Color3.fromRGB(0, 253, 255)),ColorSequenceKeypoint.new(0.557, Color3.fromRGB(0, 168, 255)),ColorSequenceKeypoint.new(0.613, Color3.fromRGB(0, 83, 255)),ColorSequenceKeypoint.new(0.669, Color3.fromRGB(3, 0, 255)),ColorSequenceKeypoint.new(0.724, Color3.fromRGB(89, 0, 255)),ColorSequenceKeypoint.new(0.780, Color3.fromRGB(174, 0, 255)),ColorSequenceKeypoint.new(0.836, Color3.fromRGB(255, 0, 252)),ColorSequenceKeypoint.new(0.891, Color3.fromRGB(255, 0, 167)),ColorSequenceKeypoint.new(0.947, Color3.fromRGB(255, 0, 81)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(255, 0, 0))};

							-- StarterGui.EraGui.MainWindow.Background.ColorPickers.ColorPickerTransparent.SliderHolder.UIListLayout
							ColorPickerToggle["af"] = Instance.new("UIListLayout", ColorPickerToggle["aa"]);
							ColorPickerToggle["af"]["HorizontalAlignment"] = Enum.HorizontalAlignment.Center;
							ColorPickerToggle["af"]["Padding"] = UDim.new(0, 12);
							ColorPickerToggle["af"]["SortOrder"] = Enum.SortOrder.LayoutOrder;

							-- StarterGui.EraGui.MainWindow.Background.ColorPickers.ColorPickerTransparent.SliderHolder.TransparentScrollBar
							ColorPickerToggle["b0"] = Instance.new("ImageLabel", ColorPickerToggle["aa"]);
							ColorPickerToggle["b0"]["BorderSizePixel"] = 0;
							ColorPickerToggle["b0"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
							ColorPickerToggle["b0"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
							ColorPickerToggle["b0"]["Image"] = [[rbxassetid://117785366512595]];
							ColorPickerToggle["b0"]["Size"] = UDim2.new(1, 0, 0, 4);
							ColorPickerToggle["b0"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
							ColorPickerToggle["b0"]["BackgroundTransparency"] = 1;
							ColorPickerToggle["b0"]["Name"] = [[TransparentScrollBar]];
							ColorPickerToggle["b0"]["Position"] = UDim2.new(0.5, 0, 0, 0);

							-- StarterGui.EraGui.MainWindow.Background.ColorPickers.ColorPickerTransparent.SliderHolder.TransparentScrollBar.ScrollBarTransparent
							ColorPickerToggle["b1"] = Instance.new("Frame", ColorPickerToggle["b0"]);
							ColorPickerToggle["b1"]["BorderSizePixel"] = 0;
							ColorPickerToggle["b1"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
							ColorPickerToggle["b1"]["Size"] = UDim2.new(1, 0, 1, 0);
							ColorPickerToggle["b1"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
							ColorPickerToggle["b1"]["Name"] = [[GradientScrollBarTransparent]];
							-- StarterGui.EraGui.MainWindow.Background.ColorPickers.ColorPickerTransparent.SliderHolder.TransparentScrollBar.UICorner
							ColorPickerToggle["b5"] = Instance.new("UICorner", ColorPickerToggle["b1"]);
							ColorPickerToggle["b5"]["CornerRadius"] = UDim.new(0, 20);

							-- StarterGui.EraGui.MainWindow.Background.ColorPickers.ColorPickerTransparent.SliderHolder.TransparentScrollBar.ScrollBarTransparent.Knob
							ColorPickerToggle["b2"] = Instance.new("ImageLabel", ColorPickerToggle["b1"]);
							ColorPickerToggle["b2"]["ImageColor3"] = Color3.fromRGB(246, 246, 246);
							ColorPickerToggle["b2"]["ZIndex"] = 2;
							ColorPickerToggle["b2"]["AnchorPoint"] = Vector2.new(0, 0.5);
							ColorPickerToggle["b2"]["Image"] = [[http://www.roblox.com/asset/?id=101717031440345]];
							ColorPickerToggle["b2"]["Size"] = UDim2.new(0, 13, 0, 13);
							ColorPickerToggle["b2"]["BackgroundTransparency"] = 1;
							ColorPickerToggle["b2"]["Name"] = [[Knob]];
							ColorPickerToggle["b2"]["BorderColor3"] = Color3.fromRGB(28, 43, 54);
							ColorPickerToggle["b2"]["Position"] = UDim2.new(0, 25, 0.5, 0);

							-- StarterGui.EraGui.MainWindow.Background.ColorPickers.ColorPickerTransparent.SliderHolder.TransparentScrollBar.ScrollBarTransparent.UIGradient
							ColorPickerToggle["b3"] = Instance.new("UIGradient", ColorPickerToggle["b1"]);
							ColorPickerToggle["b3"]["Transparency"] = NumberSequence.new{NumberSequenceKeypoint.new(0.000, 0),NumberSequenceKeypoint.new(0.001, 1),NumberSequenceKeypoint.new(0.100, 0.9),NumberSequenceKeypoint.new(0.200, 0.8),NumberSequenceKeypoint.new(0.300, 0.7),NumberSequenceKeypoint.new(0.400, 0.6),NumberSequenceKeypoint.new(0.500, 0.5),NumberSequenceKeypoint.new(0.600, 0.4),NumberSequenceKeypoint.new(0.700, 0.3),NumberSequenceKeypoint.new(0.800, 0.2),NumberSequenceKeypoint.new(0.900, 0.1),NumberSequenceKeypoint.new(1.000, 0)};

							-- StarterGui.EraGui.MainWindow.Background.ColorPickers.ColorPickerTransparent.SliderHolder.TransparentScrollBar.ScrollBarTransparent.UICorner
							ColorPickerToggle["b4"] = Instance.new("UICorner", ColorPickerToggle["b1"]);
							ColorPickerToggle["b4"]["CornerRadius"] = UDim.new(0, 20);

							-- StarterGui.EraGui.MainWindow.Background.ColorPickers.ColorPickerTransparent.SliderHolder.TransparentScrollBar.UICorner
							ColorPickerToggle["b5"] = Instance.new("UICorner", ColorPickerToggle["b0"]);
							ColorPickerToggle["b5"]["CornerRadius"] = UDim.new(0, 20);

							-- StarterGui.EraGui.MainWindow.Background.ColorPickers.ColorPickerTransparent.SliderHolder.UIPadding
							ColorPickerToggle["b6"] = Instance.new("UIPadding", ColorPickerToggle["aa"]);
							ColorPickerToggle["b6"]["PaddingRight"] = UDim.new(0, 5);
							ColorPickerToggle["b6"]["PaddingLeft"] = UDim.new(0, 5);
						end

						--/// SET FUNCTION DISPLAY
						local h,s,v = ColorPickerToggle.Color:ToHSV()
						local color = Color3.fromHSV(h,s,v) 

						local function setDisplay()
							--Main
							ColorPickerToggle["a5"].Position = UDim2.new(s,-ColorPickerToggle["a5"].AbsoluteSize.X/2,1-v,-ColorPickerToggle["a5"].AbsoluteSize.Y/2)
							--ColorPickerToggle["a5"].ImageColor3 = Color3.fromHSV(h,s,v)
							ColorPickerToggle["a0"].BackgroundColor3 = Color3.fromHSV(h,1,1)
							ColorPickerToggle["a6"].BackgroundColor3 = Color3.fromHSV(h,s,v)
							--Slider 
							local x = h * ColorPickerToggle["ab"].AbsoluteSize.X
							ColorPickerToggle["ad"].Position = UDim2.new(0,x-ColorPickerToggle["ad"].AbsoluteSize.X/2,0.5,0)
							ColorPickerToggle["ad"].ImageColor3 = Color3.fromHSV(h,1,1)
							ColorPickerToggle["b1"].BackgroundColor3 = Color3.fromHSV(h,s,v)
							ColorPickerToggle["84"].BackgroundColor3 = Color3.fromHSV(h,s,v)
							ColorPickerToggle["84"].BackgroundTransparency = ColorPickerToggle.Transparency
							local color = Color3.fromHSV(h,s,v) 
							local r,g,b = math.floor((color.R*255)+0.5),math.floor((color.G*255)+0.5),math.floor((color.B*255)+0.5)
							--TransparentSlider
							local scrollBarPosition = (1 - ColorPickerToggle.Transparency) * ColorPickerToggle["b0"].AbsoluteSize.X 
							ColorPickerToggle["b2"].Position = UDim2.new(0, scrollBarPosition - ColorPickerToggle["b2"].AbsoluteSize.X / 2, 0.5, 0)
						end

						--/// METHODS
						do
							function ColorPickerToggle:OpenColorPicker()
								ColorPickerToggle.ColorPickerOpen = not ColorPickerToggle.ColorPickerOpen
								if ColorPickerToggle.ColorPickerOpen then
									Tab["30"].Interactable = false
									ColorPickerToggle.ColorPickerOpen = true
									ColorPickerToggle["9fr"]["Visible"] = true
									ColorPickerToggle["9fr"]["Position"] = UDim2.new(0, ColorPickerToggle["84"].AbsolutePosition.X - ColorPickerToggle["9fr"].AbsolutePosition.X + 7, 0, ColorPickerToggle["84"].AbsolutePosition.Y - ColorPickerToggle["9fr"].AbsolutePosition.Y + 7)
									tweenService:Create(ColorPickerToggle["9e"], TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut), {Position = UDim2.new(0, 0, 0, 0)}):Play()
									tweenService:Create(ColorPickerToggle["9fr"], TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut), {GroupTransparency = 0}):Play()
									local GradientSlider = ColorPickerToggle["ad"].Position.Width.Offset
									local TransparentSlider = ColorPickerToggle["b2"].Position.Width.Offset
									local MainPoint = ColorPickerToggle["a5"].Position
									ColorPickerToggle["ad"].Position = UDim2.new(0, 65, 0.5, 0)
									ColorPickerToggle["b2"].Position = UDim2.new(0, 65, 0.5, 0)
									ColorPickerToggle["a5"].Position = UDim2.new(0.45, 0, 0.42, 0);
									tweenService:Create(ColorPickerToggle["ad"], TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut), {Position = UDim2.new(0, GradientSlider, 0.5, 0)}):Play()
									tweenService:Create(ColorPickerToggle["b2"], TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut), {Position = UDim2.new(0, TransparentSlider, 0.5, 0)}):Play()
									tweenService:Create(ColorPickerToggle["a5"], TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut), {Position = MainPoint}):Play()
								else
									Tab["30"].Interactable = true
									tweenService:Create(ColorPickerToggle["9e"], TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut), {Position = UDim2.new(0, 0, 0, 7)}):Play()
									tweenService:Create(ColorPickerToggle["9fr"], TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut), {GroupTransparency = 1}):Play()
									wait(0.3)
									ColorPickerToggle["9fr"]["Position"] = UDim2.new(0,0,0,0)
									ColorPickerToggle.ColorPickerOpen = false
									ColorPickerToggle["9fr"]["Visible"] = false
								end
							end

							function ColorPickerToggle:Toggle(b)
								if b == nil then
									ColorPickerToggle.State = not ColorPickerToggle.State
								else
									ColorPickerToggle.State = b
								end
								ColorPickerToggle["5v"].Value = ColorPickerToggle.State
								if ColorPickerToggle.State then
									tweenService:Create(ColorPickerToggle["82"], TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut), {Position = UDim2.new(1, -19, 0.5, 0)}):Play()
									tweenService:Create(ColorPickerToggle["82"], TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut), {ImageColor3 = MenuManager.SelectedTheme.ToggleKnob}):Play()
									tweenService:Create(ColorPickerToggle["82"], TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut), {ImageTransparency = 0}):Play()
									tweenService:Create(ColorPickerToggle["80"], TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut), {BackgroundTransparency = 0}):Play()
								else
									tweenService:Create(ColorPickerToggle["82"], TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut), {Position = UDim2.new(1, -34, 0.5, 0)}):Play()
									tweenService:Create(ColorPickerToggle["82"], TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut), {ImageColor3 = Color3.fromRGB(230, 230, 230)}):Play()
									tweenService:Create(ColorPickerToggle["82"], TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut), {ImageTransparency = 0.3}):Play()
									tweenService:Create(ColorPickerToggle["80"], TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut), {BackgroundTransparency = 1}):Play()
								end
								local Success, Response;
									if options.TransparencyBar then
										Success, Response = pcall(function()
											options.Callback(ColorPickerToggle.State,Color3.fromHSV(h,s,v), ColorPickerToggle.Transparency)
										end)
	
									else
										Success, Response = pcall(function()
											options.Callback(ColorPickerToggle.State,Color3.fromHSV(h,s,v), nil)
										end)
									end
									if not Success then
										MenuManager:ReportErrors(Response, options.Title)
								end
							end

							function ColorPickerToggle:SetColor(RGBColor, TransparencyValue)
								ColorPickerToggle.Color = RGBColor
								h,s,v = ColorPickerToggle.Color:ToHSV()
								color = Color3.fromHSV(h, s, v)
								if TransparencyValue ~= nil then
									ColorPickerToggle.Transparency = TransparencyValue
									ColorPickerToggle:SetTransparency(TransparencyValue)
								end
								setDisplay()
							end

							function ColorPickerToggle:SetTransparency(TransparencyValue)
								ColorPickerToggle.Transparency = TransparencyValue
								setDisplay()
							end
						end

						--/// TOGGLE LOGIC
						do
							if not options.TransparencyBar then
								ColorPickerToggle["b0"].Visible = false
								ColorPickerToggle["9e"].Size = UDim2.new(0, 155, 0, 165)
								ColorPickerToggle["9fr"].Size = UDim2.new(0, 155, 0, 175)
								ColorPickerToggle["af"].VerticalAlignment = Enum.VerticalAlignment.Center
							end

							ColorPickerToggle["7c"].MouseEnter:Connect(function()
								ColorPickerToggle.Hover = true
							end)
							ColorPickerToggle["7c"].MouseLeave:Connect(function()
								ColorPickerToggle.Hover = false
							end)
							ColorPickerToggle["83"].MouseEnter:Connect(function()
								ColorPickerToggle.ShowerHover = true
							end)
							ColorPickerToggle["83"].MouseLeave:Connect(function()
								ColorPickerToggle.ShowerHover = false
							end)
							ColorPickerToggle["9e"].MouseEnter:Connect(function()
								ColorPickerToggle.PickerHover = true
							end)
							ColorPickerToggle["9e"].MouseLeave:Connect(function()
								ColorPickerToggle.PickerHover = false
							end)

							uis.InputBegan:Connect(function(input, gpe)
								if gpe then return end

								if input.UserInputType == Enum.UserInputType.MouseButton1 then
									if ColorPickerToggle.Hover then
										ColorPickerToggle:Toggle()
									end

									if ColorPickerToggle.ShowerHover then
										ColorPickerToggle:OpenColorPicker()
									elseif not ColorPickerToggle.PickerHover and ColorPickerToggle.ColorPickerOpen then
										ColorPickerToggle:OpenColorPicker()
									end
								end
							end)
						end

						--/// COLOR PICKER LOGIC
						do

							ColorPickerToggle["a3"].MouseEnter:Connect(function()
								ColorPickerToggle.MainCpHover = true
							end)
							ColorPickerToggle["a3"].MouseLeave:Connect(function()
								ColorPickerToggle.MainCpHover = false
							end)
							ColorPickerToggle["ab"].MouseEnter:Connect(function()
								ColorPickerToggle.GradientSliderHover = true
							end)
							ColorPickerToggle["ab"].MouseLeave:Connect(function()
								ColorPickerToggle.GradientSliderHover = false
							end)
							ColorPickerToggle["ad"].MouseEnter:Connect(function()
								ColorPickerToggle.GradientSliderHover = true
							end)
							ColorPickerToggle["ad"].MouseLeave:Connect(function()
								ColorPickerToggle.GradientSliderHover = false
							end)
							ColorPickerToggle["b2"].MouseEnter:Connect(function()
								ColorPickerToggle.TransparentSliderHover = true
							end)
							ColorPickerToggle["b2"].MouseLeave:Connect(function()
								ColorPickerToggle.TransparentSliderHover = false
							end)
							ColorPickerToggle["b1"].MouseEnter:Connect(function()
								ColorPickerToggle.TransparentSliderHover = true
							end)
							ColorPickerToggle["b1"].MouseLeave:Connect(function()
								ColorPickerToggle.TransparentSliderHover = false
							end)

							uis.InputBegan:Connect(function(input, gpe)
								if gpe then return end

								if input.UserInputType == Enum.UserInputType.MouseButton1 then
									if ColorPickerToggle.MainCpHover and ColorPickerToggle.ColorPickerOpen then
										ColorPickerToggle.mainDragging = true
									end
									if ColorPickerToggle.GradientSliderHover and ColorPickerToggle.ColorPickerOpen then
										ColorPickerToggle.sliderDragging = true
									end
									if ColorPickerToggle.TransparentSliderHover and ColorPickerToggle.ColorPickerOpen then
										ColorPickerToggle.transparentSliderDragging = true
									end
								end
							end)

							uis.InputEnded:Connect(function(input, gameProcessed)
								if input.UserInputType == Enum.UserInputType.MouseButton1 then 
									ColorPickerToggle.mainDragging = false
									ColorPickerToggle.sliderDragging = false
									ColorPickerToggle.transparentSliderDragging = false
								end 
							end)

							game:GetService("RunService").RenderStepped:connect(function()
								if ColorPickerToggle.mainDragging then 
									local localX = math.clamp(mouse.X-ColorPickerToggle["a3"].AbsolutePosition.X,0,ColorPickerToggle["a3"].AbsoluteSize.X)
									local localY = math.clamp(mouse.Y-ColorPickerToggle["a3"].AbsolutePosition.Y,0,ColorPickerToggle["a3"].AbsoluteSize.Y)
									ColorPickerToggle["a5"].Position = UDim2.new(0,localX-ColorPickerToggle["a5"].AbsoluteSize.X/2,0,localY-ColorPickerToggle["a5"].AbsoluteSize.Y/2)
									s = localX / ColorPickerToggle["a3"].AbsoluteSize.X
									v = 1 - (localY / ColorPickerToggle["a3"].AbsoluteSize.Y)
									ColorPickerToggle["a6"].BackgroundColor3 = Color3.fromHSV(h,s,v)
									--ColorPickerToggle["a5"].ImageColor3 = Color3.fromHSV(h,s,v)
									ColorPickerToggle["b1"].BackgroundColor3 = Color3.fromHSV(h,s,v)
									ColorPickerToggle["84"].BackgroundColor3 = Color3.fromHSV(h,s,v)
									ColorPickerToggle["a0"].BackgroundColor3 = Color3.fromHSV(h,1,1)
									local color = Color3.fromHSV(h,s,v) 
									local r,g,b = math.floor((color.R*255)+0.5),math.floor((color.G*255)+0.5),math.floor((color.B*255)+0.5)
									if options.TransparencyBar then
										pcall(function()
											options.Callback(ColorPickerToggle.State,Color3.fromHSV(h,s,v), ColorPickerToggle.Transparency)
										end)
									else
										pcall(function()
											options.Callback(ColorPickerToggle.State,Color3.fromHSV(h,s,v), nil)
										end)
									end
									ColorPickerToggle.Color = Color3.fromRGB(r,g,b)
								end
								if ColorPickerToggle.sliderDragging and not ColorPickerToggle.transparentSliderDragging then 
									local localX = math.clamp(mouse.X-ColorPickerToggle["ab"].AbsolutePosition.X,0,ColorPickerToggle["ab"].AbsoluteSize.X)
									h = localX / ColorPickerToggle["ab"].AbsoluteSize.X
									ColorPickerToggle["a6"].BackgroundColor3 = Color3.fromHSV(h,s,v)
									ColorPickerToggle["b1"].BackgroundColor3 = Color3.fromHSV(h,s,v)
									ColorPickerToggle["84"].BackgroundColor3 = Color3.fromHSV(h,s,v)
									ColorPickerToggle["ad"].Position = UDim2.new(0,localX-ColorPickerToggle["ad"].AbsoluteSize.X/2,0.5,0)
									ColorPickerToggle["ad"].ImageColor3 = Color3.fromHSV(h,1,1)
									ColorPickerToggle["a0"].BackgroundColor3 = Color3.fromHSV(h,1,1)
									--ColorPickerToggle["a5"].ImageColor3 = Color3.fromHSV(h,s,v)
									local color = Color3.fromHSV(h,s,v) 
									local r,g,b = math.floor((color.R*255)+0.5),math.floor((color.G*255)+0.5),math.floor((color.B*255)+0.5)
									if options.TransparencyBar then
										pcall(function()
											options.Callback(ColorPickerToggle.State, Color3.fromHSV(h,s,v), ColorPickerToggle.Transparency)
										end)

									else
										pcall(function()
											options.Callback(ColorPickerToggle.State, Color3.fromHSV(h,s,v), nil)
										end)
									end

									ColorPickerToggle.Color = Color3.fromRGB(r,g,b)
								end
								if ColorPickerToggle.transparentSliderDragging and not ColorPickerToggle.sliderDragging then
									local localX = math.clamp(mouse.X-ColorPickerToggle["b1"].AbsolutePosition.X,0,ColorPickerToggle["b1"].AbsoluteSize.X)
									local transparency = math.floor((1 - (localX / ColorPickerToggle["b1"].AbsoluteSize.X)) * 1000 + 0.5) / 1000
									ColorPickerToggle["84"].Transparency = transparency
									ColorPickerToggle["b2"].Position = UDim2.new(0,localX-ColorPickerToggle["b2"].AbsoluteSize.X/2,0.5,0)
									ColorPickerToggle.Transparency = transparency
									if options.TransparencyBar then 
										pcall(function()
											options.Callback(ColorPickerToggle.State,Color3.fromHSV(h,s,v), ColorPickerToggle.Transparency)
										end)

									else
										pcall(function()
											options.Callback(ColorPickerToggle.State,Color3.fromHSV(h,s,v), nil)
										end)
									end
								end
							end)

							setDisplay()
						end

						ColorPickerToggle:Toggle(options.Enabled)
						MenuManager.Options[options.Title] = ColorPickerToggle
						return ColorPickerToggle
					end

					--/// COLOR PICKER
					function Category:CreateColorPicker(options)
						options = EraGui:validate({
							Title = "Color Picker",
							TransparencyBar = true,
							TransparencyValue = 0;
							Color = Color3.fromRGB(11,220,120),
							Callback = function(color, transparent) end,
						}, options or {})

						MenuManager.Options[options.Title] = nil

						local ColorPicker = {
							ShowerHover = false,
							PickerHover = false,

							GradientSliderHover = false,
							TransparentSliderHover = false,
							transparentSliderDragging = false,
							MainCpHover = false,
							mainDragging = false,
							sliderDragging = false,

							ColorPickerOpen = false,
							Transparency = options.TransparencyValue,
							Color = options.Color,
							Type = "ColorPicker";
							Name = options.Title
						}

						--/// RENDER
						do
							-- StarterGui.EraGui.MainWindow.Background.ContentHolder.AnimationHolder.ScrollingFrame.Category.ColorPicker
							ColorPicker["7a"] = Instance.new("Frame", Category["33"]);
							ColorPicker["7a"]["ZIndex"] = 4;
							ColorPicker["7a"]["BorderSizePixel"] = 0;
							ColorPicker["7a"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
							ColorPicker["7a"]["Size"] = UDim2.new(1, 0, 0, 30);
							ColorPicker["7a"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
							ColorPicker["7a"]["Name"] = [[ColorPicker]];
							ColorPicker["7a"]["BackgroundTransparency"] = 1;

							ColorPicker["5v"] = Instance.new("BoolValue", ColorPicker["7a"])
							ColorPicker["5v"]["Value"] = false

							-- StarterGui.EraGui.MainWindow.Background.ContentHolder.AnimationHolder.ScrollingFrame.Category.ColorPicker.Title
							ColorPicker["7b"] = Instance.new("TextLabel", ColorPicker["7a"]);
							ColorPicker["7b"]["TextWrapped"] = true;
							ColorPicker["7b"]["BorderSizePixel"] = 0;
							ColorPicker["7b"]["TextXAlignment"] = Enum.TextXAlignment.Left;
							ColorPicker["7b"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
							ColorPicker["7b"]["TextSize"] = 15;
							ColorPicker["7b"]["FontFace"] = Font.new([[rbxassetid://12187365364]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
							ColorPicker["7b"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
							ColorPicker["7b"]["BackgroundTransparency"] = 1;
							ColorPicker["7b"]["Size"] = UDim2.new(1, -35, 1, 0);
							ColorPicker["7b"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
							ColorPicker["7b"]["Text"] = options.Title;
							ColorPicker["7b"]["Name"] = [[Title]];
							ColorPicker["7b"]["Position"] = UDim2.new(0, 10, 0, 0);

							-- StarterGui.EraGui.MainWindow.Background.ContentHolder.AnimationHolder.ScrollingFrame.Category.ColorPicker.ColorPickerShow
							ColorPicker["83"] = Instance.new("ImageLabel", ColorPicker["7a"]);
							ColorPicker["83"]["BorderSizePixel"] = 0;
							ColorPicker["83"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
							ColorPicker["83"]["AnchorPoint"] = Vector2.new(1, 0.5);
							ColorPicker["83"]["Image"] = [[rbxassetid://75936605349812]];
							ColorPicker["83"]["Size"] = UDim2.new(0, 21, 0, 21);
							ColorPicker["83"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
							ColorPicker["83"]["BackgroundTransparency"] = 1;
							ColorPicker["83"]["Name"] = [[ColorPickerShow]];
							ColorPicker["83"]["Position"] = UDim2.new(1, 0, 0.5, 0);

							-- StarterGui.EraGui.MainWindow.Background.ContentHolder.AnimationHolder.ScrollingFrame.Category.ColorPicker.ColorPickerShow.ColorShow
							ColorPicker["84"] = Instance.new("Frame", ColorPicker["83"]);
							ColorPicker["84"]["BorderSizePixel"] = 0;
							ColorPicker["84"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
							ColorPicker["84"]["Size"] = UDim2.new(1, 0, 1, 0);
							ColorPicker["84"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
							ColorPicker["84"]["Name"] = [[ColorShow]];

							-- StarterGui.EraGui.MainWindow.Background.ContentHolder.AnimationHolder.ScrollingFrame.Category.ColorPicker.ColorPickerShow.ColorShow.UICorner
							ColorPicker["85"] = Instance.new("UICorner", ColorPicker["84"]);
							ColorPicker["85"]["CornerRadius"] = UDim.new(0, 6);

							-- StarterGui.EraGui.MainWindow.Background.ContentHolder.AnimationHolder.ScrollingFrame.Category.ColorPicker.ColorPickerShow.UICorner
							ColorPicker["86"] = Instance.new("UICorner", ColorPicker["83"]);
							ColorPicker["86"]["CornerRadius"] = UDim.new(0, 7);
						end

						--/// COLOR PICKER RENDER
						do
							ColorPicker["9fr"] = Instance.new("CanvasGroup", MenuManager["9d"])
							ColorPicker["9fr"]["Visible"] = false;
							ColorPicker["9fr"]["ZIndex"] = 5;
							ColorPicker["9fr"]["GroupTransparency"] = 1
							ColorPicker["9fr"]["BackgroundTransparency"] = 1
							ColorPicker["9fr"]["BorderSizePixel"] = 0;
							ColorPicker["9fr"]["BackgroundColor3"] = Color3.fromRGB(36, 36, 36);
							ColorPicker["9fr"]["Size"] = UDim2.new(0, 155, 0, 185);
							ColorPicker["9fr"]["Position"] = UDim2.new(0, 0, 0, 0);
							ColorPicker["9fr"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);

							-- StarterGui.EraGui.MainWindow.Background.ColorPickers.ColorPickerTransparent
							ColorPicker["9e"] = Instance.new("Frame", ColorPicker["9fr"]);
							ColorPicker["9e"]["Visible"] = true;
							ColorPicker["9e"]["ZIndex"] = 5;
							ColorPicker["9e"]["BorderSizePixel"] = 0;
							ColorPicker["9e"]["BackgroundColor3"] = Color3.fromRGB(36, 36, 36);
							ColorPicker["9e"]["Size"] = UDim2.new(1, 0, 0, 175);
							ColorPicker["9e"]["Position"] = UDim2.new(0, 0, 0, 7);
							ColorPicker["9e"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
							ColorPicker["9e"]["Name"] = [[ColorPickerTransparent]];

							-- StarterGui.EraGui.MainWindow.Background.ColorPickers.ColorPickerTransparent.UICorner
							ColorPicker["9f"] = Instance.new("UICorner", ColorPicker["9e"]);

							-- StarterGui.EraGui.MainWindow.Background.ColorPickers.ColorPickerTransparent.BackgroundCP
							ColorPicker["a0"] = Instance.new("Frame", ColorPicker["9e"]);
							ColorPicker["a0"]["BorderSizePixel"] = 0;
							ColorPicker["a0"]["BackgroundTransparency"] = 0;
							ColorPicker["a0"]["BackgroundColor3"] = Color3.fromRGB(99, 255, 0);
							ColorPicker["a0"]["AnchorPoint"] = Vector2.new(0.5, 0);
							ColorPicker["a0"]["Size"] = UDim2.new(0, 140, 0, 130);
							ColorPicker["a0"]["Position"] = UDim2.new(0.5, 0, 0, 7);
							ColorPicker["a0"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
							ColorPicker["a0"]["Name"] = [[BackgroundCP]];

							-- StarterGui.EraGui.MainWindow.Background.ColorPickers.ColorPickerTransparent.BackgroundCP.UICorner
							ColorPicker["a1"] = Instance.new("UICorner", ColorPicker["a0"]);

							-- StarterGui.EraGui.MainWindow.Background.ColorPickers.ColorPickerTransparent.BackgroundCP.UIStroke
							ColorPicker["a2"] = Instance.new("UIStroke", ColorPicker["a0"]);
							ColorPicker["a2"]["Transparency"] = 0.5;
							ColorPicker["a2"]["ApplyStrokeMode"] = Enum.ApplyStrokeMode.Border;
							ColorPicker["a2"]["Thickness"] = 2;

							-- StarterGui.EraGui.MainWindow.Background.ColorPickers.ColorPickerTransparent.BackgroundCP.MainCP
							ColorPicker["a3"] = Instance.new("ImageLabel", ColorPicker["a0"]);
							ColorPicker["a3"]["BorderSizePixel"] = 0;
							ColorPicker["a3"]["ImageTransparency"] = 0;
							ColorPicker["a3"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
							ColorPicker["a3"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
							ColorPicker["a3"]["Image"] = [[http://www.roblox.com/asset/?id=11415645739]];
							ColorPicker["a3"]["Size"] = UDim2.new(1, 0, 1, 0);
							ColorPicker["a3"]["BackgroundTransparency"] = 1;
							ColorPicker["a3"]["Name"] = [[MainCP]];
							ColorPicker["a3"]["BorderColor3"] = Color3.fromRGB(28, 43, 54);
							ColorPicker["a3"]["Position"] = UDim2.new(0.5, 0, 0.5, 0);
							ColorPicker["a3"]["ZIndex"] = 2;

							-- StarterGui.EraGui.MainWindow.Background.ColorPickers.ColorPickerTransparent.BackgroundCP.MainCP.UICorner
							ColorPicker["a4"] = Instance.new("UICorner", ColorPicker["a3"]);
							ColorPicker["a4"]["CornerRadius"] = UDim.new(0, 5);

							-- StarterGui.EraGui.MainWindow.Background.ColorPickers.ColorPickerTransparent.BackgroundCP.MainCP.MainPoint
							ColorPicker["a5"] = Instance.new("ImageLabel", ColorPicker["a3"]);
							ColorPicker["a5"]["BorderSizePixel"] = 0;
							ColorPicker["a5"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
							ColorPicker["a5"]["Image"] = [[http://www.roblox.com/asset/?id=77998759001817]];
							ColorPicker["a5"]["Size"] = UDim2.new(0, 14, 0, 14);
							ColorPicker["a5"]["BackgroundTransparency"] = 1;
							ColorPicker["a5"]["Name"] = [[MainPoint]];
							ColorPicker["a5"]["BorderColor3"] = Color3.fromRGB(28, 43, 54);
							ColorPicker["a5"]["Position"] = UDim2.new(0.45, 0, 0.4, 0);

							-- StarterGui.EraGui.MainWindow.Background.ColorPickers.ColorPickerTransparent.BackgroundCP.Display
							ColorPicker["a6"] = Instance.new("Frame", ColorPicker["a0"]);
							ColorPicker["a6"]["Interactable"] = false;
							ColorPicker["a6"]["BorderSizePixel"] = 0;
							ColorPicker["a6"]["BackgroundTransparency"] = 1;
							ColorPicker["a6"]["BackgroundColor3"] = Color3.fromRGB(99, 255, 0);
							ColorPicker["a6"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
							ColorPicker["a6"]["Size"] = UDim2.new(1, 0, 1, 0);
							ColorPicker["a6"]["Position"] = UDim2.new(0.5, 0, 0.5, 0);
							ColorPicker["a6"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
							ColorPicker["a6"]["Name"] = [[Display]];

							-- StarterGui.EraGui.MainWindow.Background.ColorPickers.ColorPickerTransparent.BackgroundCP.Display.UICorner
							ColorPicker["a7"] = Instance.new("UICorner", ColorPicker["a6"]);

							-- StarterGui.EraGui.MainWindow.Background.ColorPickers.ColorPickerTransparent.BackgroundCP.Display.Frame
							ColorPicker["a8"] = Instance.new("Frame", ColorPicker["a6"]);
							ColorPicker["a8"]["Interactable"] = false;
							ColorPicker["a8"]["BorderSizePixel"] = 0;
							ColorPicker["a8"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
							ColorPicker["a8"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
							ColorPicker["a8"]["Size"] = UDim2.new(1, 0, 1, 0);
							ColorPicker["a8"]["Position"] = UDim2.new(0.5, 0, 0.5, 0);
							ColorPicker["a8"]["BorderColor3"] = Color3.fromRGB(28, 43, 54);
							ColorPicker["a8"]["BackgroundTransparency"] = 0.75;


							-- StarterGui.EraGui.MainWindow.Background.ColorPickers.ColorPickerTransparent.BackgroundCP.Display.Frame.UICorner
							ColorPicker["a9"] = Instance.new("UICorner", ColorPicker["a8"]);
							ColorPicker["a9"]["CornerRadius"] = UDim.new(0, 6);

							-- StarterGui.EraGui.MainWindow.Background.ColorPickers.ColorPickerTransparent.SliderHolder
							ColorPicker["aa"] = Instance.new("Frame", ColorPicker["9e"]);
							ColorPicker["aa"]["BorderSizePixel"] = 0;
							ColorPicker["aa"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
							ColorPicker["aa"]["AnchorPoint"] = Vector2.new(0.5, 1);
							ColorPicker["aa"]["Size"] = UDim2.new(0, 150, 0, 30);
							ColorPicker["aa"]["Position"] = UDim2.new(0.5, 0, 1, 0);
							ColorPicker["aa"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
							ColorPicker["aa"]["Name"] = [[SliderHolder]];
							ColorPicker["aa"]["BackgroundTransparency"] = 1;

							-- StarterGui.EraGui.MainWindow.Background.ColorPickers.ColorPickerTransparent.SliderHolder.GradientScrollBar
							ColorPicker["ab"] = Instance.new("ImageLabel", ColorPicker["aa"]);
							ColorPicker["ab"]["BorderSizePixel"] = 0;
							ColorPicker["ab"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
							ColorPicker["ab"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
							ColorPicker["ab"]["Size"] = UDim2.new(1, 0, 0, 4);
							ColorPicker["ab"]["Position"] = UDim2.new(0.5, 0, 0, 0);
							ColorPicker["ab"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
							ColorPicker["ab"]["Name"] = [[GradientScrollBar]];

							-- StarterGui.EraGui.MainWindow.Background.ColorPickers.ColorPickerTransparent.SliderHolder.GradientScrollBar.UICorner
							ColorPicker["ac"] = Instance.new("UICorner", ColorPicker["ab"]);
							ColorPicker["ac"]["CornerRadius"] = UDim.new(0, 20);

							-- StarterGui.EraGui.MainWindow.Background.ColorPickers.ColorPickerTransparent.SliderHolder.GradientScrollBar.Knob
							ColorPicker["ad"] = Instance.new("ImageLabel", ColorPicker["ab"]);
							ColorPicker["ad"]["ImageColor3"] = Color3.fromRGB(246, 246, 246);
							ColorPicker["ad"]["ZIndex"] = 2;
							ColorPicker["ad"]["AnchorPoint"] = Vector2.new(0, 0.5);
							ColorPicker["ad"]["Image"] = [[http://www.roblox.com/asset/?id=101717031440345]];
							ColorPicker["ad"]["Size"] = UDim2.new(0, 13, 0, 13);
							ColorPicker["ad"]["BackgroundTransparency"] = 1;
							ColorPicker["ad"]["Name"] = [[Knob]];
							ColorPicker["ad"]["BorderColor3"] = Color3.fromRGB(28, 43, 54);
							ColorPicker["ad"]["Position"] = UDim2.new(0, 25, 0.5, 0);

							-- StarterGui.EraGui.MainWindow.Background.ColorPickers.ColorPickerTransparent.SliderHolder.GradientScrollBar.UIGradient
							ColorPicker["ae"] = Instance.new("UIGradient", ColorPicker["ab"]);
							ColorPicker["ae"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(255, 0, 0)),ColorSequenceKeypoint.new(0.056, Color3.fromRGB(255, 86, 0)),ColorSequenceKeypoint.new(0.111, Color3.fromRGB(255, 171, 0)),ColorSequenceKeypoint.new(0.167, Color3.fromRGB(255, 255, 0)),ColorSequenceKeypoint.new(0.223, Color3.fromRGB(170, 255, 0)),ColorSequenceKeypoint.new(0.279, Color3.fromRGB(84, 255, 0)),ColorSequenceKeypoint.new(0.334, Color3.fromRGB(0, 255, 2)),ColorSequenceKeypoint.new(0.390, Color3.fromRGB(0, 255, 87)),ColorSequenceKeypoint.new(0.446, Color3.fromRGB(0, 255, 172)),ColorSequenceKeypoint.new(0.501, Color3.fromRGB(0, 253, 255)),ColorSequenceKeypoint.new(0.557, Color3.fromRGB(0, 168, 255)),ColorSequenceKeypoint.new(0.613, Color3.fromRGB(0, 83, 255)),ColorSequenceKeypoint.new(0.669, Color3.fromRGB(3, 0, 255)),ColorSequenceKeypoint.new(0.724, Color3.fromRGB(89, 0, 255)),ColorSequenceKeypoint.new(0.780, Color3.fromRGB(174, 0, 255)),ColorSequenceKeypoint.new(0.836, Color3.fromRGB(255, 0, 252)),ColorSequenceKeypoint.new(0.891, Color3.fromRGB(255, 0, 167)),ColorSequenceKeypoint.new(0.947, Color3.fromRGB(255, 0, 81)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(255, 0, 0))};

							-- StarterGui.EraGui.MainWindow.Background.ColorPickers.ColorPickerTransparent.SliderHolder.UIListLayout
							ColorPicker["af"] = Instance.new("UIListLayout", ColorPicker["aa"]);
							ColorPicker["af"]["HorizontalAlignment"] = Enum.HorizontalAlignment.Center;
							ColorPicker["af"]["Padding"] = UDim.new(0, 12);
							ColorPicker["af"]["SortOrder"] = Enum.SortOrder.LayoutOrder;

							-- StarterGui.EraGui.MainWindow.Background.ColorPickers.ColorPickerTransparent.SliderHolder.TransparentScrollBar
							ColorPicker["b0"] = Instance.new("ImageLabel", ColorPicker["aa"]);
							ColorPicker["b0"]["BorderSizePixel"] = 0;
							ColorPicker["b0"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
							ColorPicker["b0"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
							ColorPicker["b0"]["Image"] = [[rbxassetid://117785366512595]];
							ColorPicker["b0"]["Size"] = UDim2.new(1, 0, 0, 4);
							ColorPicker["b0"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
							ColorPicker["b0"]["BackgroundTransparency"] = 1;
							ColorPicker["b0"]["Name"] = [[TransparentScrollBar]];
							ColorPicker["b0"]["Position"] = UDim2.new(0.5, 0, 0, 0);

							-- StarterGui.EraGui.MainWindow.Background.ColorPickers.ColorPickerTransparent.SliderHolder.TransparentScrollBar.ScrollBarTransparent
							ColorPicker["b1"] = Instance.new("Frame", ColorPicker["b0"]);
							ColorPicker["b1"]["BorderSizePixel"] = 0;
							ColorPicker["b1"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
							ColorPicker["b1"]["Size"] = UDim2.new(1, 0, 1, 0);
							ColorPicker["b1"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
							ColorPicker["b1"]["Name"] = [[GradientScrollBarTransparent]];
							-- StarterGui.EraGui.MainWindow.Background.ColorPickers.ColorPickerTransparent.SliderHolder.TransparentScrollBar.UICorner
							ColorPicker["b5"] = Instance.new("UICorner", ColorPicker["b1"]);
							ColorPicker["b5"]["CornerRadius"] = UDim.new(0, 20);

							-- StarterGui.EraGui.MainWindow.Background.ColorPickers.ColorPickerTransparent.SliderHolder.TransparentScrollBar.ScrollBarTransparent.Knob
							ColorPicker["b2"] = Instance.new("ImageLabel", ColorPicker["b1"]);
							ColorPicker["b2"]["ImageColor3"] = Color3.fromRGB(246, 246, 246);
							ColorPicker["b2"]["ZIndex"] = 2;
							ColorPicker["b2"]["AnchorPoint"] = Vector2.new(0, 0.5);
							ColorPicker["b2"]["Image"] = [[http://www.roblox.com/asset/?id=101717031440345]];
							ColorPicker["b2"]["Size"] = UDim2.new(0, 13, 0, 13);
							ColorPicker["b2"]["BackgroundTransparency"] = 1;
							ColorPicker["b2"]["Name"] = [[Knob]];
							ColorPicker["b2"]["BorderColor3"] = Color3.fromRGB(28, 43, 54);
							ColorPicker["b2"]["Position"] = UDim2.new(0, 25, 0.5, 0);

							-- StarterGui.EraGui.MainWindow.Background.ColorPickers.ColorPickerTransparent.SliderHolder.TransparentScrollBar.ScrollBarTransparent.UIGradient
							ColorPicker["b3"] = Instance.new("UIGradient", ColorPicker["b1"]);
							ColorPicker["b3"]["Transparency"] = NumberSequence.new{NumberSequenceKeypoint.new(0.000, 0),NumberSequenceKeypoint.new(0.001, 1),NumberSequenceKeypoint.new(0.100, 0.9),NumberSequenceKeypoint.new(0.200, 0.8),NumberSequenceKeypoint.new(0.300, 0.7),NumberSequenceKeypoint.new(0.400, 0.6),NumberSequenceKeypoint.new(0.500, 0.5),NumberSequenceKeypoint.new(0.600, 0.4),NumberSequenceKeypoint.new(0.700, 0.3),NumberSequenceKeypoint.new(0.800, 0.2),NumberSequenceKeypoint.new(0.900, 0.1),NumberSequenceKeypoint.new(1.000, 0)};

							-- StarterGui.EraGui.MainWindow.Background.ColorPickers.ColorPickerTransparent.SliderHolder.TransparentScrollBar.ScrollBarTransparent.UICorner
							ColorPicker["b4"] = Instance.new("UICorner", ColorPicker["b1"]);
							ColorPicker["b4"]["CornerRadius"] = UDim.new(0, 20);

							-- StarterGui.EraGui.MainWindow.Background.ColorPickers.ColorPickerTransparent.SliderHolder.TransparentScrollBar.UICorner
							ColorPicker["b5"] = Instance.new("UICorner", ColorPicker["b0"]);
							ColorPicker["b5"]["CornerRadius"] = UDim.new(0, 20);

							-- StarterGui.EraGui.MainWindow.Background.ColorPickers.ColorPickerTransparent.SliderHolder.UIPadding
							ColorPicker["b6"] = Instance.new("UIPadding", ColorPicker["aa"]);
							ColorPicker["b6"]["PaddingRight"] = UDim.new(0, 5);
							ColorPicker["b6"]["PaddingLeft"] = UDim.new(0, 5);
						end

						--/// SET FUNCTION DISPLAY
						local h,s,v = ColorPicker.Color:ToHSV()
						local color = Color3.fromHSV(h,s,v) 

						local function setDisplay()
							--Main
							ColorPicker["a5"].Position = UDim2.new(s,-ColorPicker["a5"].AbsoluteSize.X/2,1-v,-ColorPicker["a5"].AbsoluteSize.Y/2)
							--ColorPicker["a5"].ImageColor3 = Color3.fromHSV(h,s,v)
							ColorPicker["a0"].BackgroundColor3 = Color3.fromHSV(h,1,1)
							ColorPicker["a6"].BackgroundColor3 = Color3.fromHSV(h,s,v)
							--Slider 
							local x = h * ColorPicker["ab"].AbsoluteSize.X
							ColorPicker["ad"].Position = UDim2.new(0,x-ColorPicker["ad"].AbsoluteSize.X/2,0.5,0)
							ColorPicker["ad"].ImageColor3 = Color3.fromHSV(h,1,1)
							ColorPicker["b1"].BackgroundColor3 = Color3.fromHSV(h,s,v)
							ColorPicker["84"].BackgroundColor3 = Color3.fromHSV(h,s,v)
							ColorPicker["84"].BackgroundTransparency = ColorPicker.Transparency
							local color = Color3.fromHSV(h,s,v) 
							local r,g,b = math.floor((color.R*255)+0.5),math.floor((color.G*255)+0.5),math.floor((color.B*255)+0.5)
							--TransparentSlider
							local scrollBarPosition = (1 - ColorPicker.Transparency) * ColorPicker["b0"].AbsoluteSize.X
							ColorPicker["b2"].Position = UDim2.new(0, scrollBarPosition - ColorPicker["b2"].AbsoluteSize.X / 2, 0.5, 0)
						end

						--/// METHODS
						do
							function ColorPicker:OpenColorPicker()
								ColorPicker.ColorPickerOpen = not ColorPicker.ColorPickerOpen
								if ColorPicker.ColorPickerOpen then
									Tab["30"].Interactable = false
									ColorPicker.ColorPickerOpen = true
									ColorPicker["9fr"]["Visible"] = true
									ColorPicker["9fr"]["Position"] = UDim2.new(0, ColorPicker["84"].AbsolutePosition.X - ColorPicker["9fr"].AbsolutePosition.X + 7, 0, ColorPicker["84"].AbsolutePosition.Y - ColorPicker["9fr"].AbsolutePosition.Y + 7)
									tweenService:Create(ColorPicker["9e"], TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut), {Position = UDim2.new(0, 0, 0, 0)}):Play()
									tweenService:Create(ColorPicker["9fr"], TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut), {GroupTransparency = 0}):Play()
									local GradientSlider = ColorPicker["ad"].Position.Width.Offset
									local TransparentSlider = ColorPicker["b2"].Position.Width.Offset
									local MainPoint = ColorPicker["a5"].Position
									ColorPicker["ad"].Position = UDim2.new(0, 65, 0.5, 0)
									ColorPicker["b2"].Position = UDim2.new(0, 65, 0.5, 0)
									ColorPicker["a5"].Position = UDim2.new(0.45, 0, 0.42, 0);
									tweenService:Create(ColorPicker["ad"], TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut), {Position = UDim2.new(0, GradientSlider, 0.5, 0)}):Play()
									tweenService:Create(ColorPicker["b2"], TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut), {Position = UDim2.new(0, TransparentSlider, 0.5, 0)}):Play()
									tweenService:Create(ColorPicker["a5"], TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut), {Position = MainPoint}):Play()
								else
									Tab["30"].Interactable = true
									tweenService:Create(ColorPicker["9e"], TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut), {Position = UDim2.new(0, 0, 0, 7)}):Play()
									tweenService:Create(ColorPicker["9fr"], TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut), {GroupTransparency = 1}):Play()
									wait(0.3)
									ColorPicker["9fr"]["Position"] = UDim2.new(0,0,0,0)
									ColorPicker.ColorPickerOpen = false
									ColorPicker["9fr"]["Visible"] = false
								end
							end

							function ColorPicker:SetColor(RGBColor, TransparencyValue)
								ColorPicker.Color = RGBColor
								h,s,v = ColorPicker.Color:ToHSV()
								color = Color3.fromHSV(h, s, v)
								if TransparencyValue ~= nil then
									ColorPicker.Transparency = TransparencyValue
								end
								setDisplay()
							end

							function ColorPicker:SetTransparency(TransparencyValue)
								ColorPicker.Transparency = TransparencyValue
								setDisplay()
							end
						end

						--/// TOGGLE LOGIC
						do
							if not options.TransparencyBar then
								ColorPicker["b0"].Visible = false
								ColorPicker["9e"].Size = UDim2.new(0, 155, 0, 165)
								ColorPicker["9fr"].Size = UDim2.new(0, 155, 0, 175)
								ColorPicker["af"].VerticalAlignment = Enum.VerticalAlignment.Center
							end

							ColorPicker["83"].MouseEnter:Connect(function()
								ColorPicker.ShowerHover = true
							end)
							ColorPicker["83"].MouseLeave:Connect(function()
								ColorPicker.ShowerHover = false
							end)
							ColorPicker["9e"].MouseEnter:Connect(function()
								ColorPicker.PickerHover = true
							end)
							ColorPicker["9e"].MouseLeave:Connect(function()
								ColorPicker.PickerHover = false
							end)

							uis.InputBegan:Connect(function(input, gpe)
								if gpe then return end

								if input.UserInputType == Enum.UserInputType.MouseButton1 then
									if ColorPicker.ShowerHover then
										ColorPicker:OpenColorPicker()
									elseif not ColorPicker.PickerHover and ColorPicker.ColorPickerOpen then
										ColorPicker:OpenColorPicker()
									end
								end
							end)
						end

						--/// COLOR PICKER LOGIC
						do

							ColorPicker["a3"].MouseEnter:Connect(function()
								ColorPicker.MainCpHover = true
							end)
							ColorPicker["a3"].MouseLeave:Connect(function()
								ColorPicker.MainCpHover = false
							end)
							ColorPicker["ab"].MouseEnter:Connect(function()
								ColorPicker.GradientSliderHover = true
							end)
							ColorPicker["ab"].MouseLeave:Connect(function()
								ColorPicker.GradientSliderHover = false
							end)
							ColorPicker["ad"].MouseEnter:Connect(function()
								ColorPicker.GradientSliderHover = true
							end)
							ColorPicker["ad"].MouseLeave:Connect(function()
								ColorPicker.GradientSliderHover = false
							end)
							ColorPicker["b2"].MouseEnter:Connect(function()
								ColorPicker.TransparentSliderHover = true
							end)
							ColorPicker["b2"].MouseLeave:Connect(function()
								ColorPicker.TransparentSliderHover = false
							end)
							ColorPicker["b1"].MouseEnter:Connect(function()
								ColorPicker.TransparentSliderHover = true
							end)
							ColorPicker["b1"].MouseLeave:Connect(function()
								ColorPicker.TransparentSliderHover = false
							end)

							uis.InputBegan:Connect(function(input, gpe)
								if gpe then return end

								if input.UserInputType == Enum.UserInputType.MouseButton1 then
									if ColorPicker.MainCpHover and ColorPicker.ColorPickerOpen then
										ColorPicker.mainDragging = true
									end
									if ColorPicker.GradientSliderHover and ColorPicker.ColorPickerOpen and not ColorPicker.TransparentSliderHover then
										ColorPicker.sliderDragging = true
									end
									if ColorPicker.TransparentSliderHover and ColorPicker.ColorPickerOpen and not ColorPicker.GradientSliderHover then
										ColorPicker.transparentSliderDragging = true
									end
								end
							end)

							uis.InputEnded:Connect(function(input, gameProcessed)
								if input.UserInputType == Enum.UserInputType.MouseButton1 then 
									ColorPicker.mainDragging = false
									ColorPicker.sliderDragging = false
									ColorPicker.transparentSliderDragging = false
								end 
							end)

							game:GetService("RunService").RenderStepped:connect(function()
								if ColorPicker.mainDragging then 
									local localX = math.clamp(mouse.X-ColorPicker["a3"].AbsolutePosition.X,0,ColorPicker["a3"].AbsoluteSize.X)
									local localY = math.clamp(mouse.Y-ColorPicker["a3"].AbsolutePosition.Y,0,ColorPicker["a3"].AbsoluteSize.Y)
									ColorPicker["a5"].Position = UDim2.new(0,localX-ColorPicker["a5"].AbsoluteSize.X/2,0,localY-ColorPicker["a5"].AbsoluteSize.Y/2)
									s = localX / ColorPicker["a3"].AbsoluteSize.X
									v = 1 - (localY / ColorPicker["a3"].AbsoluteSize.Y)
									ColorPicker["a6"].BackgroundColor3 = Color3.fromHSV(h,s,v)
									--ColorPicker["a5"].ImageColor3 = Color3.fromHSV(h,s,v)
									ColorPicker["b1"].BackgroundColor3 = Color3.fromHSV(h,s,v)
									ColorPicker["84"].BackgroundColor3 = Color3.fromHSV(h,s,v)
									ColorPicker["a0"].BackgroundColor3 = Color3.fromHSV(h,1,1)
									local color = Color3.fromHSV(h,s,v) 
									local r,g,b = math.floor((color.R*255)+0.5),math.floor((color.G*255)+0.5),math.floor((color.B*255)+0.5)
									if options.TransparencyBar then
										pcall(function()
											options.Callback(Color3.fromHSV(h,s,v), ColorPicker.Transparency)
										end)
									else
										pcall(function()
											options.Callback(Color3.fromHSV(h,s,v), nil)
										end)
									end
									ColorPicker.Color = Color3.fromRGB(r,g,b)
								end
								if ColorPicker.sliderDragging and not ColorPicker.transparentSliderDragging then 
									local localX = math.clamp(mouse.X-ColorPicker["ab"].AbsolutePosition.X,0,ColorPicker["ab"].AbsoluteSize.X)
									h = localX / ColorPicker["ab"].AbsoluteSize.X
									ColorPicker["a6"].BackgroundColor3 = Color3.fromHSV(h,s,v)
									ColorPicker["b1"].BackgroundColor3 = Color3.fromHSV(h,s,v)
									ColorPicker["84"].BackgroundColor3 = Color3.fromHSV(h,s,v)
									ColorPicker["ad"].Position = UDim2.new(0,localX-ColorPicker["ad"].AbsoluteSize.X/2,0.5,0)
									ColorPicker["ad"].ImageColor3 = Color3.fromHSV(h,1,1)
									ColorPicker["a0"].BackgroundColor3 = Color3.fromHSV(h,1,1)
									--ColorPicker["a5"].ImageColor3 = Color3.fromHSV(h,s,v)
									local color = Color3.fromHSV(h,s,v) 
									local r,g,b = math.floor((color.R*255)+0.5),math.floor((color.G*255)+0.5),math.floor((color.B*255)+0.5)
									if options.TransparencyBar then
										pcall(function()
											options.Callback(Color3.fromHSV(h,s,v), ColorPicker.Transparency)
										end)

									else
										pcall(function()
											options.Callback(Color3.fromHSV(h,s,v), nil)
										end)
									end

									ColorPicker.Color = Color3.fromRGB(r,g,b)
								end
								if ColorPicker.transparentSliderDragging and not ColorPicker.sliderDragging then
									local localX = math.clamp(mouse.X-ColorPicker["b1"].AbsolutePosition.X,0,ColorPicker["b1"].AbsoluteSize.X)
									local transparency = math.floor((1 - (localX / ColorPicker["b1"].AbsoluteSize.X)) * 1000 + 0.5) / 1000
									ColorPicker["84"].Transparency = transparency
									ColorPicker["b2"].Position = UDim2.new(0,localX-ColorPicker["b2"].AbsoluteSize.X/2,0.5,0)
									ColorPicker.Transparency = transparency
									if options.TransparencyBar then
										pcall(function()
											options.Callback(Color3.fromHSV(h,s,v), ColorPicker.Transparency)
										end)
									else
										pcall(function()
											options.Callback(Color3.fromHSV(h,s,v), nil)
										end)
									end
								end
							end)

							setDisplay()
						end

						MenuManager.Options[options.Title] = ColorPicker
						return ColorPicker
					end

				end

				return Category
			end

			return Tab
		end
	end
	
	--///MENU MANAGER METHODS

	do
		function MenuManager:CreateNewTab(options)
			local newTab = MenuManager:CreateTab(options)
			table.insert(MenuManager.TabManager.Tabs, newTab)
			return newTab
		end
	
		function MenuManager:CreateCategoryInTab(tab, categoryOptions)
			if tab and tab.CreateCategory then
				return tab:CreateCategory(categoryOptions)
			else
				error("Invalid tab or CreateCategory method not found")
			end
		end
	
		function MenuManager:ChangeTheme(theme)
			local SelectedTheme = Themes.MenuTheme[theme]
	
			tweenService:Create(MenuManager["8"], TweenInfo.new(0.2, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {BackgroundColor3 = SelectedTheme.BlurredMain}):Play()
			tweenService:Create(MenuManager["7"], TweenInfo.new(0.2, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {Color = SelectedTheme.BlurredBorder}):Play()
	
			if MenuManager.TransparencyMenu then
				tweenService:Create(MenuManager["8"], TweenInfo.new(0.2, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {BackgroundTransparency = SelectedTheme.BlurredTransparency}):Play()			
			end
	
			MenuManager["6"]["Color"] = SelectedTheme.BlurredGradient
	
			for _, tabPage in pairs(MenuManager["2f"]:GetChildren()) do
				if tabPage.ClassName == "ScrollingFrame" then
					for _, Category in pairs(tabPage:GetChildren()) do
						if Category.ClassName == "Frame" then
							for _, Element in pairs(Category:GetDescendants()) do
								if Element.Name == "Button" or Element.Name == "Label" or Element.Name == "dropdown" then
									tweenService:Create(Element, TweenInfo.new(0.2, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {BackgroundColor3 = SelectedTheme.ElementMain}):Play()
									tweenService:Create(Element.UIStroke, TweenInfo.new(0.2, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {Color = SelectedTheme.ElementBorder}):Play()
									tweenService:Create(Element, TweenInfo.new(0.2, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {BackgroundTransparency = SelectedTheme.ElementTransparency}):Play()
								end
	
								if Element.Name == "FilledBar" or Element.Name == "EnabledBackground" then
									tweenService:Create(Element, TweenInfo.new(0.2, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {BackgroundColor3 = SelectedTheme.SecondElements}):Play()
								end
								if Element.Name == "Knob" then
									if Element.Parent.Parent.Parent:FindFirstChild("Value") then
										if Element.Parent.Parent.Parent.Value.Value then
											Element.ImageColor3 = SelectedTheme.ToggleKnob
										end
									else
										Element.ImageColor3 = SelectedTheme.ToggleKnob
									end									
								end
							end
						end
					end
				end
			end
	
			for _, Element in pairs(MenuManager["3"]:GetDescendants()) do
				if (Element.ClassName == "TextLabel" or Element.ClassName == "TextButton") and tostring(Element.Name:sub(1, 6)) ~= "Ignore" then
					print("text or button - ".. Element.Text .. " with sub: ".. tostring(Element.Name:sub(1, 6)))
					Element.TextColor3 = SelectedTheme.Text
				end
				if Element.ClassName == "TextBox" and Element.Name:sub(1, 6) ~= "Ignore" then
					Element.TextColor3 = SelectedTheme.Text
					Element.PlaceholderColor3 = SelectedTheme.SubText
				end
				if Element.Name == "CloseButton" or Element.Name == "MinimizeButton" then
					Element.icon.ImageColor3 = SelectedTheme.Text
				end
				if Element.Name == "Tab" then
					Element.Icon.ImageColor3 = SelectedTheme.Text
				end
				if Element.Name == "Line" then
					Element.BackgroundColor3 = SelectedTheme.Lines
				end
				if Element.Name == "OptionsHolder" then
					tweenService:Create(Element.AnimHolder.optionsHolder, TweenInfo.new(0.2, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {BackgroundColor3 = SelectedTheme.DropdownMain}):Play()
					tweenService:Create(Element.AnimHolder.optionsHolder, TweenInfo.new(0.2, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {BackgroundTransparency = SelectedTheme.DropdownTransparency}):Play()
				end
			end
		end
	
		function MenuManager:ReportErrors(errors, FunctionName)
			print("╔═════════════════════════════════════════════╗")
			print("║  Function Name: ", FunctionName)
			print("║  Callback Error: ", errors)
			print("╚═════════════════════════════════════════════╝")
			
			MenuManager.Notify:NewNotify("Era Hub", "Detected error in ".. FunctionName, 3)

			if options.Webhook ~= "" then
	
				local data = {
					["content"] = "",
					["username"] = "Era Reporter",
					["embeds"] = {
						{
							["title"] = "**Detected Some Errors**",
							["description"] = "" ,
							["type"] = "rich",     
							["footer"] = {
								["text"] = os.date("%c", os.time())
							},
							fields = {
	
								{
									name = "**Function Name: **",
									value = "> " .. FunctionName,
									inline = false
								},
	
								{
									name = "**Error: **",
									value = "> " .. errors,
									inline = false
								},
	
								{
									name = "**Username**",
									value = "> " .. game.Players.LocalPlayer.Name,
									inline = true
								},
	
	
								{
									name = "**Game**",
									value = "> " .. game:GetService("MarketplaceService"):GetProductInfo(game.PlaceId).Name,
									inline = true
								},
	
								{
									name = "**Executor**",
									value = "> " .. identifyexecutor(),
									inline = true
								},
	
							}
						}
					}
				}
	
				local headers = {
					["content-type"] = "application/json"
				}
	
				local a = { Url = options.Webhook, Body = game:GetService("HttpService"):JSONEncode(data), Method = "POST", Headers = headers }
	
				request(a)
			end
			
		end
	end
	
	--///CONFIG MANAGER
	do
		function MenuManager.ConfigManager:Load(file)
			local dirName = MenuManager.ConfigManager.FolderName
			local filename = file .. ".json"
			local fullDirFile = dirName .. "/" .. filename

			if not isfile(fullDirFile) then
				return false
			end	

			local success, decoded = pcall(HttpService.JSONDecode, HttpService, readfile(fullDirFile))
			if not success then return false end

			for _, option in next, decoded.objects do
				
				if MenuManager.ConfigManager.ElementsParser[option.type] then
					task.spawn(MenuManager.ConfigManager.ElementsParser[option.type].Load, option.idx, option.value) 
				end
			end

			return true
		end

		function MenuManager.ConfigManager:Save(file)
			local dirName = MenuManager.ConfigManager.FolderName
			local filename = file .. ".json"
			local fullDirFile = dirName .. "/" .. filename

			if not isfolder(dirName) then
				makefolder(dirName)
			end

			if isfolder(dirName) then
				if not isfile(fullDirFile) then
				  	writefile(fullDirFile, "") 
				end    
			end

			local data = {
				objects = {}
			}

            local parser = MenuManager.ConfigManager.ElementsParser

			for idx, object in pairs(MenuManager.Options) do
				if MenuManager.ConfigManager.IgnorableIdx[idx] then continue end

				table.insert(data.objects, MenuManager.ConfigManager.ElementsParser[object.Type].Save(idx))
			end

            local success, encoded = pcall(HttpService.JSONEncode, HttpService, data)
			
            if not success then
				print('failed')
                return false, "failed to encode data"
            end

		    writefile(fullDirFile, encoded)

            return true, "success"
		end

		function MenuManager.ConfigManager:RefreshConfigsList()

			local list = listfiles(MenuManager.ConfigManager.FolderName)
	
			local out = {}
			for i = 1, #list do
				local file = list[i]
				if file:sub(-5) == ".json" then
					local pos = file:find(".json", 1, true)
					local start = pos
	
					local char = file:sub(pos, pos)
					while char ~= "/" and char ~= "\\" and char ~= "" do
						pos = pos - 1
						char = file:sub(pos, pos)
					end
	
					if char == "/" or char == "\\" then
						local name = file:sub(pos + 1, start - 1)
						if name ~= "options" then
							table.insert(out, name)
						end
					end
				end
			end
			
			return out
		end

		function MenuManager.ConfigManager:SetIgnoreIdx(idx)
			MenuManager.ConfigManager.IgnorableIdx[idx] = true
		end
	end

	-- /// SETTINGS FUNCTIONALITY
	local CloseBind;
	local BlurObj;
	local CFGSDropdown;
	
	do
		local settingsObject = MenuManager:CreateNewTab({Title = "Settings", Icon = "rbxassetid://84765404272480", Parent = MenuManager["1d"], InitFirst = false})

		local SettingsCategory = settingsObject:CreateCategory({
			Title = "UI Customization",
		})

		SettingsCategory:CreateToggle({
			Title = "Acrylic Background",
			Enabled = true,
			Callback = function(bool)
				MenuManager.AcrylicMenu = bool
				if MenuManager.AcrylicMenu then
					BlurModule.init(MenuManager["8"])
					BlurObj = BlurModule.new(MenuManager["8"], "Rectangle")
					print(BlurObj)
					BlurModule.updateAll()
				end
				
				if not MenuManager.AcrylicMenu then
					BlurModule.Destroy(BlurObj)
				end
			end,
		})

		SettingsCategory:CreateDropdown({
			Title = "Theme",
			Items = {"Dark", "Light"},
			Selected = {"Dark"},
			MultiSelection = false,
			Callback = function(item)
				MenuManager.SelectedTheme = Themes.MenuTheme[item]
				MenuManager:ChangeTheme(item)
			end,
		})

		SettingsCategory:CreateToggle({
			Title = "Transparent Background",
			Enabled = MenuManager.TransparencyMenu,
			Callback = function(bool)
				MenuManager.TransparencyMenu = bool
				
				if MenuManager.TransparencyMenu then
					tweenService:Create(MenuManager["8"], TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut), {BackgroundTransparency = 0.6}):Play()
				else
					tweenService:Create(MenuManager["8"], TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut), {BackgroundTransparency = 0}):Play()
				end
			end,
		})

		SettingsCategory:CreateHeader({Title = "Others"})

		CloseBind = SettingsCategory:CreateBindToggle({
			Title = "Close Menu",
			BindButton = "RightControl",
			Enabled = true,
			Callback = function(v)
				MenuManager["2"].Visible = v
				MenuManager.MenuOpen = v
				if not v and MenuManager.AcrylicMenu then
					MenuManager.Notify:NewNotify("Era Hub", "Menu Is Closed!", 3)
					BlurModule.Destroy(BlurObj)
					MenuManager.AcrylicMenu = false
				elseif v and not MenuManager.AcrylicMenu then
					MenuManager.AcrylicMenu = true
					BlurModule.init(MenuManager["8"])
					BlurObj = BlurModule.new(MenuManager["8"], "Rectangle")
					BlurModule.updateAll()
				end
			end,
		})

		SettingsCategory:CreateButton({
			Title = "Unload Script",
			Callback = function()
				BlurModule.Destroy(BlurObj)
				MenuManager["1"]:Destroy()
				MenuManager.Notify:Unload()
			end,
		})

		SettingsCategory:CreateHeader({Title = "Configs Manager"})
		local selectedCFG = nil
		local newConfigText = ""

		CFGSDropdown = SettingsCategory:CreateDropdown({
			Title = "Configs", 
			Items = {"123"},
			MultiSelection = false,
			Callback = function(item)
				selectedCFG = item
			end
		})

		SettingsCategory:CreateButton({
			Title = "Load Config",
			Callback = function()
				if not selectedCFG then MenuManager.Notify:NewNotify("Era Hub | Error", "First, Select The Config!", 5) return end

				local status = MenuManager.ConfigManager:Load(selectedCFG)

				if status then
					MenuManager.Notify:NewNotify("Era Hub | Successfully!", "Successfully Loaded Config: ".. selectedCFG, 5)
				else
					MenuManager.Notify:NewNotify("Era Hub | Error", "Something Went Wrong!", 5)
				end

				local cfgs = MenuManager.ConfigManager:RefreshConfigsList()
				CFGSDropdown:Refresh(cfgs, {})
			end,
		})

		SettingsCategory:CreateButton({
			Title = "Save Config",
			Callback = function()
				if not selectedCFG then MenuManager.Notify:NewNotify("Era Hub | Error", "First, Select The Config!", 5) return end

				local status = MenuManager.ConfigManager:Save(selectedCFG)

				if status then
					MenuManager.Notify:NewNotify("Era Hub | Successfully!", "Successfully Saved Config: ".. selectedCFG, 5)
				else
					MenuManager.Notify:NewNotify("Era Hub | Error", "Something Went Wrong!", 5)
				end

				local cfgs = MenuManager.ConfigManager:RefreshConfigsList()
				CFGSDropdown:Refresh(cfgs, {})
			end,
		})

		SettingsCategory:CreateButton({
			Title = "Set As Autoload",
			Callback = function()
				if not selectedCFG then MenuManager.Notify:NewNotify("Era Hub | Error", "First, Select The Config!", 5) return end

				if not isfolder(MenuManager.ConfigManager.FolderName) then
					makefolder(MenuManager.ConfigManager.FolderName)
				end

				writefile(MenuManager.ConfigManager.FolderName .. "/" .. "autoexec.txt", selectedCFG)
				MenuManager.Notify:NewNotify("Era Hub | Successfully", "Successfully Set To Autoload: " .. selectedCFG, 5)
			end,
		})

		SettingsCategory:CreateHeader({Title = "Create Config"})
		
		SettingsCategory:CreateInputBox({
			Title = "Config Name",
			PlaceHolderText = "Input Your Config Name Here",
			Callback = function(text)
				newConfigText = text
			end,
		})

		SettingsCategory:CreateButton({
			Title = "Create Config",
			Callback = function()
				if newConfigText:gsub(" ", "") == "" then
					MenuManager.Notify:NewNotify("Era Hub | Error", "Invalid config name!", 5)
					return
				end

				local status = MenuManager.ConfigManager:Save(newConfigText)
				
				if status then
					MenuManager.Notify:NewNotify("Era Hub | Successfully!", "Successfully Created Config: ".. newConfigText, 5)
				else
					MenuManager.Notify:NewNotify("Era Hub | Error", "Something Went Wrong!", 5)
				end

				local cfgs = MenuManager.ConfigManager:RefreshConfigsList()
				CFGSDropdown:Refresh(cfgs, {})
			end,
		})

	end

	--///TOP BAR BUTTON
	do
		MenuManager["27"].MouseEnter:Connect(function()
			EraGui:SetTransparency(MenuManager["27"], 0.90)
		end)
		MenuManager["27"].MouseLeave:Connect(function()
			EraGui:SetTransparency(MenuManager["27"], 1)
		end)
		MenuManager["27"].MouseButton1Click:Connect(function()
			MenuManager.Minimized = not MenuManager.Minimized

			if MenuManager.Minimized  then
				MenuManager["c"].Visible = not MenuManager.Minimized
				MenuManager["2e"].Visible = not MenuManager.Minimized
				tweenService:Create(MenuManager["3"], TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut), {Size = UDim2.new(1, 0, 0, 40)}):Play()
			else
				tweenService:Create(MenuManager["3"], TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut), {Size = UDim2.new(1, 0, 1, 0)}):Play()
				task.wait(0.1)
				MenuManager["c"].Visible = not MenuManager.Minimized
				MenuManager["2e"].Visible = not MenuManager.Minimized
			end
		end)

		MenuManager["24"].MouseEnter:Connect(function()
			EraGui:SetTransparency(MenuManager["24"], 0.90)
		end)
		MenuManager["24"].MouseLeave:Connect(function()
			EraGui:SetTransparency(MenuManager["24"], 1)
		end)
		MenuManager["24"].MouseButton1Click:Connect(function()
			MenuManager["2"].Visible = false
			MenuManager.MenuOpen = false
			if MenuManager.AcrylicMenu then
				BlurModule.Destroy(BlurObj)
				MenuManager.AcrylicMenu = false
			end
			CloseBind:Toggle()
		end)
	end

	local cfgs = MenuManager.ConfigManager:RefreshConfigsList()
	CFGSDropdown:Refresh(cfgs, {})

	MenuManager.ConfigManager:SetIgnoreIdx("Configs")
	MenuManager.ConfigManager:SetIgnoreIdx("Config Name")

	if isfolder(MenuManager.ConfigManager.FolderName) then
		if isfile(MenuManager.ConfigManager.FolderName .. "/" .. "autoexec.txt") then
			local cfgToLoad = readfile(MenuManager.ConfigManager.FolderName .. "/" .. "autoexec.txt")
			MenuManager.ConfigManager:Load(cfgToLoad)
		end    
	end
	
	EraGui:AddMovingMenu(MenuManager["23"], MenuManager["2"])
	return MenuManager;
end

return EraGui
